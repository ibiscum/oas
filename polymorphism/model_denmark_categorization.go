/*
Polymorphism support

https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.3.md#schema-object

API version: 1.0.0
Contact: a-team@goarmy.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package polymorphism

import (
	"encoding/json"
	"fmt"
)

// checks if the DenmarkCategorization type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DenmarkCategorization{}

// DenmarkCategorization struct for DenmarkCategorization
type DenmarkCategorization struct {
	ListingType string `json:"listing_type"`
	DataReportingStatus *string `json:"data_reporting_status,omitempty"`
	DataReportingBbr *string `json:"data_reporting_bbr,omitempty"`
	Attestation *bool `json:"attestation,omitempty"`
	AttestationConditional *bool `json:"attestation_conditional,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DenmarkCategorization DenmarkCategorization

// NewDenmarkCategorization instantiates a new DenmarkCategorization object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDenmarkCategorization(listingType string) *DenmarkCategorization {
	this := DenmarkCategorization{}
	this.ListingType = listingType
	return &this
}

// NewDenmarkCategorizationWithDefaults instantiates a new DenmarkCategorization object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDenmarkCategorizationWithDefaults() *DenmarkCategorization {
	this := DenmarkCategorization{}
	return &this
}

// GetListingType returns the ListingType field value
func (o *DenmarkCategorization) GetListingType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ListingType
}

// GetListingTypeOk returns a tuple with the ListingType field value
// and a boolean to check if the value has been set.
func (o *DenmarkCategorization) GetListingTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ListingType, true
}

// SetListingType sets field value
func (o *DenmarkCategorization) SetListingType(v string) {
	o.ListingType = v
}

// GetDataReportingStatus returns the DataReportingStatus field value if set, zero value otherwise.
func (o *DenmarkCategorization) GetDataReportingStatus() string {
	if o == nil || IsNil(o.DataReportingStatus) {
		var ret string
		return ret
	}
	return *o.DataReportingStatus
}

// GetDataReportingStatusOk returns a tuple with the DataReportingStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DenmarkCategorization) GetDataReportingStatusOk() (*string, bool) {
	if o == nil || IsNil(o.DataReportingStatus) {
		return nil, false
	}
	return o.DataReportingStatus, true
}

// HasDataReportingStatus returns a boolean if a field has been set.
func (o *DenmarkCategorization) HasDataReportingStatus() bool {
	if o != nil && !IsNil(o.DataReportingStatus) {
		return true
	}

	return false
}

// SetDataReportingStatus gets a reference to the given string and assigns it to the DataReportingStatus field.
func (o *DenmarkCategorization) SetDataReportingStatus(v string) {
	o.DataReportingStatus = &v
}

// GetDataReportingBbr returns the DataReportingBbr field value if set, zero value otherwise.
func (o *DenmarkCategorization) GetDataReportingBbr() string {
	if o == nil || IsNil(o.DataReportingBbr) {
		var ret string
		return ret
	}
	return *o.DataReportingBbr
}

// GetDataReportingBbrOk returns a tuple with the DataReportingBbr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DenmarkCategorization) GetDataReportingBbrOk() (*string, bool) {
	if o == nil || IsNil(o.DataReportingBbr) {
		return nil, false
	}
	return o.DataReportingBbr, true
}

// HasDataReportingBbr returns a boolean if a field has been set.
func (o *DenmarkCategorization) HasDataReportingBbr() bool {
	if o != nil && !IsNil(o.DataReportingBbr) {
		return true
	}

	return false
}

// SetDataReportingBbr gets a reference to the given string and assigns it to the DataReportingBbr field.
func (o *DenmarkCategorization) SetDataReportingBbr(v string) {
	o.DataReportingBbr = &v
}

// GetAttestation returns the Attestation field value if set, zero value otherwise.
func (o *DenmarkCategorization) GetAttestation() bool {
	if o == nil || IsNil(o.Attestation) {
		var ret bool
		return ret
	}
	return *o.Attestation
}

// GetAttestationOk returns a tuple with the Attestation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DenmarkCategorization) GetAttestationOk() (*bool, bool) {
	if o == nil || IsNil(o.Attestation) {
		return nil, false
	}
	return o.Attestation, true
}

// HasAttestation returns a boolean if a field has been set.
func (o *DenmarkCategorization) HasAttestation() bool {
	if o != nil && !IsNil(o.Attestation) {
		return true
	}

	return false
}

// SetAttestation gets a reference to the given bool and assigns it to the Attestation field.
func (o *DenmarkCategorization) SetAttestation(v bool) {
	o.Attestation = &v
}

// GetAttestationConditional returns the AttestationConditional field value if set, zero value otherwise.
func (o *DenmarkCategorization) GetAttestationConditional() bool {
	if o == nil || IsNil(o.AttestationConditional) {
		var ret bool
		return ret
	}
	return *o.AttestationConditional
}

// GetAttestationConditionalOk returns a tuple with the AttestationConditional field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DenmarkCategorization) GetAttestationConditionalOk() (*bool, bool) {
	if o == nil || IsNil(o.AttestationConditional) {
		return nil, false
	}
	return o.AttestationConditional, true
}

// HasAttestationConditional returns a boolean if a field has been set.
func (o *DenmarkCategorization) HasAttestationConditional() bool {
	if o != nil && !IsNil(o.AttestationConditional) {
		return true
	}

	return false
}

// SetAttestationConditional gets a reference to the given bool and assigns it to the AttestationConditional field.
func (o *DenmarkCategorization) SetAttestationConditional(v bool) {
	o.AttestationConditional = &v
}

func (o DenmarkCategorization) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DenmarkCategorization) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["listing_type"] = o.ListingType
	if !IsNil(o.DataReportingStatus) {
		toSerialize["data_reporting_status"] = o.DataReportingStatus
	}
	if !IsNil(o.DataReportingBbr) {
		toSerialize["data_reporting_bbr"] = o.DataReportingBbr
	}
	if !IsNil(o.Attestation) {
		toSerialize["attestation"] = o.Attestation
	}
	if !IsNil(o.AttestationConditional) {
		toSerialize["attestation_conditional"] = o.AttestationConditional
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DenmarkCategorization) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"listing_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDenmarkCategorization := _DenmarkCategorization{}

	err = json.Unmarshal(data, &varDenmarkCategorization)

	if err != nil {
		return err
	}

	*o = DenmarkCategorization(varDenmarkCategorization)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "listing_type")
		delete(additionalProperties, "data_reporting_status")
		delete(additionalProperties, "data_reporting_bbr")
		delete(additionalProperties, "attestation")
		delete(additionalProperties, "attestation_conditional")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDenmarkCategorization struct {
	value *DenmarkCategorization
	isSet bool
}

func (v NullableDenmarkCategorization) Get() *DenmarkCategorization {
	return v.value
}

func (v *NullableDenmarkCategorization) Set(val *DenmarkCategorization) {
	v.value = val
	v.isSet = true
}

func (v NullableDenmarkCategorization) IsSet() bool {
	return v.isSet
}

func (v *NullableDenmarkCategorization) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDenmarkCategorization(val *DenmarkCategorization) *NullableDenmarkCategorization {
	return &NullableDenmarkCategorization{value: val, isSet: true}
}

func (v NullableDenmarkCategorization) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDenmarkCategorization) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


