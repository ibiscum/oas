/*
Polymorphism support

https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.3.md#schema-object

API version: 1.0.0
Contact: a-team@goarmy.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package polymorphism

import (
	"encoding/json"
	"fmt"
)

// checks if the BostonRegistration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BostonRegistration{}

// BostonRegistration struct for BostonRegistration
type BostonRegistration struct {
	PermitNumber string `json:"permit_number"`
	Email string `json:"email"`
	FullName string `json:"full_name"`
	ListingAddress string `json:"listing_address"`
	Attestation bool `json:"attestation"`
	AdditionalProperties map[string]interface{}
}

type _BostonRegistration BostonRegistration

// NewBostonRegistration instantiates a new BostonRegistration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBostonRegistration(permitNumber string, email string, fullName string, listingAddress string, attestation bool) *BostonRegistration {
	this := BostonRegistration{}
	this.PermitNumber = permitNumber
	this.Email = email
	this.FullName = fullName
	this.ListingAddress = listingAddress
	this.Attestation = attestation
	return &this
}

// NewBostonRegistrationWithDefaults instantiates a new BostonRegistration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBostonRegistrationWithDefaults() *BostonRegistration {
	this := BostonRegistration{}
	return &this
}

// GetPermitNumber returns the PermitNumber field value
func (o *BostonRegistration) GetPermitNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PermitNumber
}

// GetPermitNumberOk returns a tuple with the PermitNumber field value
// and a boolean to check if the value has been set.
func (o *BostonRegistration) GetPermitNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PermitNumber, true
}

// SetPermitNumber sets field value
func (o *BostonRegistration) SetPermitNumber(v string) {
	o.PermitNumber = v
}

// GetEmail returns the Email field value
func (o *BostonRegistration) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *BostonRegistration) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *BostonRegistration) SetEmail(v string) {
	o.Email = v
}

// GetFullName returns the FullName field value
func (o *BostonRegistration) GetFullName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FullName
}

// GetFullNameOk returns a tuple with the FullName field value
// and a boolean to check if the value has been set.
func (o *BostonRegistration) GetFullNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FullName, true
}

// SetFullName sets field value
func (o *BostonRegistration) SetFullName(v string) {
	o.FullName = v
}

// GetListingAddress returns the ListingAddress field value
func (o *BostonRegistration) GetListingAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ListingAddress
}

// GetListingAddressOk returns a tuple with the ListingAddress field value
// and a boolean to check if the value has been set.
func (o *BostonRegistration) GetListingAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ListingAddress, true
}

// SetListingAddress sets field value
func (o *BostonRegistration) SetListingAddress(v string) {
	o.ListingAddress = v
}

// GetAttestation returns the Attestation field value
func (o *BostonRegistration) GetAttestation() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Attestation
}

// GetAttestationOk returns a tuple with the Attestation field value
// and a boolean to check if the value has been set.
func (o *BostonRegistration) GetAttestationOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Attestation, true
}

// SetAttestation sets field value
func (o *BostonRegistration) SetAttestation(v bool) {
	o.Attestation = v
}

func (o BostonRegistration) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BostonRegistration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["permit_number"] = o.PermitNumber
	toSerialize["email"] = o.Email
	toSerialize["full_name"] = o.FullName
	toSerialize["listing_address"] = o.ListingAddress
	toSerialize["attestation"] = o.Attestation

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *BostonRegistration) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"permit_number",
		"email",
		"full_name",
		"listing_address",
		"attestation",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBostonRegistration := _BostonRegistration{}

	err = json.Unmarshal(data, &varBostonRegistration)

	if err != nil {
		return err
	}

	*o = BostonRegistration(varBostonRegistration)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "permit_number")
		delete(additionalProperties, "email")
		delete(additionalProperties, "full_name")
		delete(additionalProperties, "listing_address")
		delete(additionalProperties, "attestation")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableBostonRegistration struct {
	value *BostonRegistration
	isSet bool
}

func (v NullableBostonRegistration) Get() *BostonRegistration {
	return v.value
}

func (v *NullableBostonRegistration) Set(val *BostonRegistration) {
	v.value = val
	v.isSet = true
}

func (v NullableBostonRegistration) IsSet() bool {
	return v.isSet
}

func (v *NullableBostonRegistration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBostonRegistration(val *BostonRegistration) *NullableBostonRegistration {
	return &NullableBostonRegistration{value: val, isSet: true}
}

func (v NullableBostonRegistration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBostonRegistration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


