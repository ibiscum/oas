/*
Polymorphism support

https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.3.md#schema-object

API version: 1.0.0
Contact: a-team@goarmy.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package polymorphism

import (
	"encoding/json"
	"fmt"
)

// AnythingNestedOneOfObjectWithNestedOneOfRequestConfig - struct for AnythingNestedOneOfObjectWithNestedOneOfRequestConfig
type AnythingNestedOneOfObjectWithNestedOneOfRequestConfig struct {
	GetPetsRequest *GetPetsRequest
	Object1 *Object1
	Object2 *Object2
}

// GetPetsRequestAsAnythingNestedOneOfObjectWithNestedOneOfRequestConfig is a convenience function that returns GetPetsRequest wrapped in AnythingNestedOneOfObjectWithNestedOneOfRequestConfig
func GetPetsRequestAsAnythingNestedOneOfObjectWithNestedOneOfRequestConfig(v *GetPetsRequest) AnythingNestedOneOfObjectWithNestedOneOfRequestConfig {
	return AnythingNestedOneOfObjectWithNestedOneOfRequestConfig{
		GetPetsRequest: v,
	}
}

// Object1AsAnythingNestedOneOfObjectWithNestedOneOfRequestConfig is a convenience function that returns Object1 wrapped in AnythingNestedOneOfObjectWithNestedOneOfRequestConfig
func Object1AsAnythingNestedOneOfObjectWithNestedOneOfRequestConfig(v *Object1) AnythingNestedOneOfObjectWithNestedOneOfRequestConfig {
	return AnythingNestedOneOfObjectWithNestedOneOfRequestConfig{
		Object1: v,
	}
}

// Object2AsAnythingNestedOneOfObjectWithNestedOneOfRequestConfig is a convenience function that returns Object2 wrapped in AnythingNestedOneOfObjectWithNestedOneOfRequestConfig
func Object2AsAnythingNestedOneOfObjectWithNestedOneOfRequestConfig(v *Object2) AnythingNestedOneOfObjectWithNestedOneOfRequestConfig {
	return AnythingNestedOneOfObjectWithNestedOneOfRequestConfig{
		Object2: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *AnythingNestedOneOfObjectWithNestedOneOfRequestConfig) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetPetsRequest
	err = newStrictDecoder(data).Decode(&dst.GetPetsRequest)
	if err == nil {
		jsonGetPetsRequest, _ := json.Marshal(dst.GetPetsRequest)
		if string(jsonGetPetsRequest) == "{}" { // empty struct
			dst.GetPetsRequest = nil
		} else {
			match++
		}
	} else {
		dst.GetPetsRequest = nil
	}

	// try to unmarshal data into Object1
	err = newStrictDecoder(data).Decode(&dst.Object1)
	if err == nil {
		jsonObject1, _ := json.Marshal(dst.Object1)
		if string(jsonObject1) == "{}" { // empty struct
			dst.Object1 = nil
		} else {
			match++
		}
	} else {
		dst.Object1 = nil
	}

	// try to unmarshal data into Object2
	err = newStrictDecoder(data).Decode(&dst.Object2)
	if err == nil {
		jsonObject2, _ := json.Marshal(dst.Object2)
		if string(jsonObject2) == "{}" { // empty struct
			dst.Object2 = nil
		} else {
			match++
		}
	} else {
		dst.Object2 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetPetsRequest = nil
		dst.Object1 = nil
		dst.Object2 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(AnythingNestedOneOfObjectWithNestedOneOfRequestConfig)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(AnythingNestedOneOfObjectWithNestedOneOfRequestConfig)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src AnythingNestedOneOfObjectWithNestedOneOfRequestConfig) MarshalJSON() ([]byte, error) {
	if src.GetPetsRequest != nil {
		return json.Marshal(&src.GetPetsRequest)
	}

	if src.Object1 != nil {
		return json.Marshal(&src.Object1)
	}

	if src.Object2 != nil {
		return json.Marshal(&src.Object2)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *AnythingNestedOneOfObjectWithNestedOneOfRequestConfig) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.GetPetsRequest != nil {
		return obj.GetPetsRequest
	}

	if obj.Object1 != nil {
		return obj.Object1
	}

	if obj.Object2 != nil {
		return obj.Object2
	}

	// all schemas are nil
	return nil
}

type NullableAnythingNestedOneOfObjectWithNestedOneOfRequestConfig struct {
	value *AnythingNestedOneOfObjectWithNestedOneOfRequestConfig
	isSet bool
}

func (v NullableAnythingNestedOneOfObjectWithNestedOneOfRequestConfig) Get() *AnythingNestedOneOfObjectWithNestedOneOfRequestConfig {
	return v.value
}

func (v *NullableAnythingNestedOneOfObjectWithNestedOneOfRequestConfig) Set(val *AnythingNestedOneOfObjectWithNestedOneOfRequestConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableAnythingNestedOneOfObjectWithNestedOneOfRequestConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableAnythingNestedOneOfObjectWithNestedOneOfRequestConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAnythingNestedOneOfObjectWithNestedOneOfRequestConfig(val *AnythingNestedOneOfObjectWithNestedOneOfRequestConfig) *NullableAnythingNestedOneOfObjectWithNestedOneOfRequestConfig {
	return &NullableAnythingNestedOneOfObjectWithNestedOneOfRequestConfig{value: val, isSet: true}
}

func (v NullableAnythingNestedOneOfObjectWithNestedOneOfRequestConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAnythingNestedOneOfObjectWithNestedOneOfRequestConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


