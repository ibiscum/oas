/*
Polymorphism support

https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.3.md#schema-object

API version: 1.0.0
Contact: a-team@goarmy.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package polymorphism

import (
	"encoding/json"
)

// checks if the OneOfWithTypeRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OneOfWithTypeRequest{}

// OneOfWithTypeRequest struct for OneOfWithTypeRequest
type OneOfWithTypeRequest struct {
	Event NullableOneOf `json:"event,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _OneOfWithTypeRequest OneOfWithTypeRequest

// NewOneOfWithTypeRequest instantiates a new OneOfWithTypeRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOneOfWithTypeRequest() *OneOfWithTypeRequest {
	this := OneOfWithTypeRequest{}
	return &this
}

// NewOneOfWithTypeRequestWithDefaults instantiates a new OneOfWithTypeRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOneOfWithTypeRequestWithDefaults() *OneOfWithTypeRequest {
	this := OneOfWithTypeRequest{}
	return &this
}

// GetEvent returns the Event field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OneOfWithTypeRequest) GetEvent() OneOf {
	if o == nil || IsNil(o.Event.Get()) {
		var ret OneOf
		return ret
	}
	return *o.Event.Get()
}

// GetEventOk returns a tuple with the Event field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OneOfWithTypeRequest) GetEventOk() (*OneOf, bool) {
	if o == nil {
		return nil, false
	}
	return o.Event.Get(), o.Event.IsSet()
}

// HasEvent returns a boolean if a field has been set.
func (o *OneOfWithTypeRequest) HasEvent() bool {
	if o != nil && o.Event.IsSet() {
		return true
	}

	return false
}

// SetEvent gets a reference to the given NullableOneOf and assigns it to the Event field.
func (o *OneOfWithTypeRequest) SetEvent(v OneOf) {
	o.Event.Set(&v)
}
// SetEventNil sets the value for Event to be an explicit nil
func (o *OneOfWithTypeRequest) SetEventNil() {
	o.Event.Set(nil)
}

// UnsetEvent ensures that no value is present for Event, not even an explicit nil
func (o *OneOfWithTypeRequest) UnsetEvent() {
	o.Event.Unset()
}

func (o OneOfWithTypeRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OneOfWithTypeRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Event.IsSet() {
		toSerialize["event"] = o.Event.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *OneOfWithTypeRequest) UnmarshalJSON(data []byte) (err error) {
	varOneOfWithTypeRequest := _OneOfWithTypeRequest{}

	err = json.Unmarshal(data, &varOneOfWithTypeRequest)

	if err != nil {
		return err
	}

	*o = OneOfWithTypeRequest(varOneOfWithTypeRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "event")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableOneOfWithTypeRequest struct {
	value *OneOfWithTypeRequest
	isSet bool
}

func (v NullableOneOfWithTypeRequest) Get() *OneOfWithTypeRequest {
	return v.value
}

func (v *NullableOneOfWithTypeRequest) Set(val *OneOfWithTypeRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableOneOfWithTypeRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableOneOfWithTypeRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOneOfWithTypeRequest(val *OneOfWithTypeRequest) *NullableOneOfWithTypeRequest {
	return &NullableOneOfWithTypeRequest{value: val, isSet: true}
}

func (v NullableOneOfWithTypeRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOneOfWithTypeRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


