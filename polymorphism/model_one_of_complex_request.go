/*
Polymorphism support

https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.3.md#schema-object

API version: 1.0.0
Contact: a-team@goarmy.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package polymorphism

import (
	"encoding/json"
	"fmt"
)

// OneOfComplexRequest - struct for OneOfComplexRequest
type OneOfComplexRequest struct {
	Andalucia *Andalucia
	Baltimore *Baltimore
	Boston *Boston
	Catalonia *Catalonia
	Chicago *Chicago
	Cuba *Cuba
	Denmark *Denmark
}

// AndaluciaAsOneOfComplexRequest is a convenience function that returns Andalucia wrapped in OneOfComplexRequest
func AndaluciaAsOneOfComplexRequest(v *Andalucia) OneOfComplexRequest {
	return OneOfComplexRequest{
		Andalucia: v,
	}
}

// BaltimoreAsOneOfComplexRequest is a convenience function that returns Baltimore wrapped in OneOfComplexRequest
func BaltimoreAsOneOfComplexRequest(v *Baltimore) OneOfComplexRequest {
	return OneOfComplexRequest{
		Baltimore: v,
	}
}

// BostonAsOneOfComplexRequest is a convenience function that returns Boston wrapped in OneOfComplexRequest
func BostonAsOneOfComplexRequest(v *Boston) OneOfComplexRequest {
	return OneOfComplexRequest{
		Boston: v,
	}
}

// CataloniaAsOneOfComplexRequest is a convenience function that returns Catalonia wrapped in OneOfComplexRequest
func CataloniaAsOneOfComplexRequest(v *Catalonia) OneOfComplexRequest {
	return OneOfComplexRequest{
		Catalonia: v,
	}
}

// ChicagoAsOneOfComplexRequest is a convenience function that returns Chicago wrapped in OneOfComplexRequest
func ChicagoAsOneOfComplexRequest(v *Chicago) OneOfComplexRequest {
	return OneOfComplexRequest{
		Chicago: v,
	}
}

// CubaAsOneOfComplexRequest is a convenience function that returns Cuba wrapped in OneOfComplexRequest
func CubaAsOneOfComplexRequest(v *Cuba) OneOfComplexRequest {
	return OneOfComplexRequest{
		Cuba: v,
	}
}

// DenmarkAsOneOfComplexRequest is a convenience function that returns Denmark wrapped in OneOfComplexRequest
func DenmarkAsOneOfComplexRequest(v *Denmark) OneOfComplexRequest {
	return OneOfComplexRequest{
		Denmark: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *OneOfComplexRequest) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Andalucia
	err = newStrictDecoder(data).Decode(&dst.Andalucia)
	if err == nil {
		jsonAndalucia, _ := json.Marshal(dst.Andalucia)
		if string(jsonAndalucia) == "{}" { // empty struct
			dst.Andalucia = nil
		} else {
			match++
		}
	} else {
		dst.Andalucia = nil
	}

	// try to unmarshal data into Baltimore
	err = newStrictDecoder(data).Decode(&dst.Baltimore)
	if err == nil {
		jsonBaltimore, _ := json.Marshal(dst.Baltimore)
		if string(jsonBaltimore) == "{}" { // empty struct
			dst.Baltimore = nil
		} else {
			match++
		}
	} else {
		dst.Baltimore = nil
	}

	// try to unmarshal data into Boston
	err = newStrictDecoder(data).Decode(&dst.Boston)
	if err == nil {
		jsonBoston, _ := json.Marshal(dst.Boston)
		if string(jsonBoston) == "{}" { // empty struct
			dst.Boston = nil
		} else {
			match++
		}
	} else {
		dst.Boston = nil
	}

	// try to unmarshal data into Catalonia
	err = newStrictDecoder(data).Decode(&dst.Catalonia)
	if err == nil {
		jsonCatalonia, _ := json.Marshal(dst.Catalonia)
		if string(jsonCatalonia) == "{}" { // empty struct
			dst.Catalonia = nil
		} else {
			match++
		}
	} else {
		dst.Catalonia = nil
	}

	// try to unmarshal data into Chicago
	err = newStrictDecoder(data).Decode(&dst.Chicago)
	if err == nil {
		jsonChicago, _ := json.Marshal(dst.Chicago)
		if string(jsonChicago) == "{}" { // empty struct
			dst.Chicago = nil
		} else {
			match++
		}
	} else {
		dst.Chicago = nil
	}

	// try to unmarshal data into Cuba
	err = newStrictDecoder(data).Decode(&dst.Cuba)
	if err == nil {
		jsonCuba, _ := json.Marshal(dst.Cuba)
		if string(jsonCuba) == "{}" { // empty struct
			dst.Cuba = nil
		} else {
			match++
		}
	} else {
		dst.Cuba = nil
	}

	// try to unmarshal data into Denmark
	err = newStrictDecoder(data).Decode(&dst.Denmark)
	if err == nil {
		jsonDenmark, _ := json.Marshal(dst.Denmark)
		if string(jsonDenmark) == "{}" { // empty struct
			dst.Denmark = nil
		} else {
			match++
		}
	} else {
		dst.Denmark = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Andalucia = nil
		dst.Baltimore = nil
		dst.Boston = nil
		dst.Catalonia = nil
		dst.Chicago = nil
		dst.Cuba = nil
		dst.Denmark = nil

		return fmt.Errorf("data matches more than one schema in oneOf(OneOfComplexRequest)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(OneOfComplexRequest)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src OneOfComplexRequest) MarshalJSON() ([]byte, error) {
	if src.Andalucia != nil {
		return json.Marshal(&src.Andalucia)
	}

	if src.Baltimore != nil {
		return json.Marshal(&src.Baltimore)
	}

	if src.Boston != nil {
		return json.Marshal(&src.Boston)
	}

	if src.Catalonia != nil {
		return json.Marshal(&src.Catalonia)
	}

	if src.Chicago != nil {
		return json.Marshal(&src.Chicago)
	}

	if src.Cuba != nil {
		return json.Marshal(&src.Cuba)
	}

	if src.Denmark != nil {
		return json.Marshal(&src.Denmark)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *OneOfComplexRequest) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.Andalucia != nil {
		return obj.Andalucia
	}

	if obj.Baltimore != nil {
		return obj.Baltimore
	}

	if obj.Boston != nil {
		return obj.Boston
	}

	if obj.Catalonia != nil {
		return obj.Catalonia
	}

	if obj.Chicago != nil {
		return obj.Chicago
	}

	if obj.Cuba != nil {
		return obj.Cuba
	}

	if obj.Denmark != nil {
		return obj.Denmark
	}

	// all schemas are nil
	return nil
}

type NullableOneOfComplexRequest struct {
	value *OneOfComplexRequest
	isSet bool
}

func (v NullableOneOfComplexRequest) Get() *OneOfComplexRequest {
	return v.value
}

func (v *NullableOneOfComplexRequest) Set(val *OneOfComplexRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableOneOfComplexRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableOneOfComplexRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOneOfComplexRequest(val *OneOfComplexRequest) *NullableOneOfComplexRequest {
	return &NullableOneOfComplexRequest{value: val, isSet: true}
}

func (v NullableOneOfComplexRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOneOfComplexRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


