/*
Polymorphism support

https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.3.md#schema-object

API version: 1.0.0
Contact: a-team@goarmy.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package polymorphism

import (
	"encoding/json"
	"fmt"
)

// GetPetsRequest - struct for GetPetsRequest
type GetPetsRequest struct {
	Cat *Cat
	Dog *Dog
}

// CatAsGetPetsRequest is a convenience function that returns Cat wrapped in GetPetsRequest
func CatAsGetPetsRequest(v *Cat) GetPetsRequest {
	return GetPetsRequest{
		Cat: v,
	}
}

// DogAsGetPetsRequest is a convenience function that returns Dog wrapped in GetPetsRequest
func DogAsGetPetsRequest(v *Dog) GetPetsRequest {
	return GetPetsRequest{
		Dog: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetPetsRequest) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Cat
	err = newStrictDecoder(data).Decode(&dst.Cat)
	if err == nil {
		jsonCat, _ := json.Marshal(dst.Cat)
		if string(jsonCat) == "{}" { // empty struct
			dst.Cat = nil
		} else {
			match++
		}
	} else {
		dst.Cat = nil
	}

	// try to unmarshal data into Dog
	err = newStrictDecoder(data).Decode(&dst.Dog)
	if err == nil {
		jsonDog, _ := json.Marshal(dst.Dog)
		if string(jsonDog) == "{}" { // empty struct
			dst.Dog = nil
		} else {
			match++
		}
	} else {
		dst.Dog = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Cat = nil
		dst.Dog = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetPetsRequest)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetPetsRequest)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetPetsRequest) MarshalJSON() ([]byte, error) {
	if src.Cat != nil {
		return json.Marshal(&src.Cat)
	}

	if src.Dog != nil {
		return json.Marshal(&src.Dog)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetPetsRequest) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.Cat != nil {
		return obj.Cat
	}

	if obj.Dog != nil {
		return obj.Dog
	}

	// all schemas are nil
	return nil
}

type NullableGetPetsRequest struct {
	value *GetPetsRequest
	isSet bool
}

func (v NullableGetPetsRequest) Get() *GetPetsRequest {
	return v.value
}

func (v *NullableGetPetsRequest) Set(val *GetPetsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableGetPetsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableGetPetsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetPetsRequest(val *GetPetsRequest) *NullableGetPetsRequest {
	return &NullableGetPetsRequest{value: val, isSet: true}
}

func (v NullableGetPetsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetPetsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


