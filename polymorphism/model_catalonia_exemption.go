/*
Polymorphism support

https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.3.md#schema-object

API version: 1.0.0
Contact: a-team@goarmy.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package polymorphism

import (
	"encoding/json"
	"fmt"
)

// checks if the CataloniaExemption type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CataloniaExemption{}

// CataloniaExemption struct for CataloniaExemption
type CataloniaExemption struct {
	Reason string `json:"reason"`
	RegistrationOwnership string `json:"registration_ownership"`
	Email string `json:"email"`
	FullName string `json:"full_name"`
	IdentificationNumber string `json:"identification_number"`
	AdditionalProperties map[string]interface{}
}

type _CataloniaExemption CataloniaExemption

// NewCataloniaExemption instantiates a new CataloniaExemption object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCataloniaExemption(reason string, registrationOwnership string, email string, fullName string, identificationNumber string) *CataloniaExemption {
	this := CataloniaExemption{}
	this.Reason = reason
	this.RegistrationOwnership = registrationOwnership
	this.Email = email
	this.FullName = fullName
	this.IdentificationNumber = identificationNumber
	return &this
}

// NewCataloniaExemptionWithDefaults instantiates a new CataloniaExemption object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCataloniaExemptionWithDefaults() *CataloniaExemption {
	this := CataloniaExemption{}
	return &this
}

// GetReason returns the Reason field value
func (o *CataloniaExemption) GetReason() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Reason
}

// GetReasonOk returns a tuple with the Reason field value
// and a boolean to check if the value has been set.
func (o *CataloniaExemption) GetReasonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Reason, true
}

// SetReason sets field value
func (o *CataloniaExemption) SetReason(v string) {
	o.Reason = v
}

// GetRegistrationOwnership returns the RegistrationOwnership field value
func (o *CataloniaExemption) GetRegistrationOwnership() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RegistrationOwnership
}

// GetRegistrationOwnershipOk returns a tuple with the RegistrationOwnership field value
// and a boolean to check if the value has been set.
func (o *CataloniaExemption) GetRegistrationOwnershipOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RegistrationOwnership, true
}

// SetRegistrationOwnership sets field value
func (o *CataloniaExemption) SetRegistrationOwnership(v string) {
	o.RegistrationOwnership = v
}

// GetEmail returns the Email field value
func (o *CataloniaExemption) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *CataloniaExemption) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *CataloniaExemption) SetEmail(v string) {
	o.Email = v
}

// GetFullName returns the FullName field value
func (o *CataloniaExemption) GetFullName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FullName
}

// GetFullNameOk returns a tuple with the FullName field value
// and a boolean to check if the value has been set.
func (o *CataloniaExemption) GetFullNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FullName, true
}

// SetFullName sets field value
func (o *CataloniaExemption) SetFullName(v string) {
	o.FullName = v
}

// GetIdentificationNumber returns the IdentificationNumber field value
func (o *CataloniaExemption) GetIdentificationNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IdentificationNumber
}

// GetIdentificationNumberOk returns a tuple with the IdentificationNumber field value
// and a boolean to check if the value has been set.
func (o *CataloniaExemption) GetIdentificationNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IdentificationNumber, true
}

// SetIdentificationNumber sets field value
func (o *CataloniaExemption) SetIdentificationNumber(v string) {
	o.IdentificationNumber = v
}

func (o CataloniaExemption) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CataloniaExemption) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["reason"] = o.Reason
	toSerialize["registration_ownership"] = o.RegistrationOwnership
	toSerialize["email"] = o.Email
	toSerialize["full_name"] = o.FullName
	toSerialize["identification_number"] = o.IdentificationNumber

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CataloniaExemption) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"reason",
		"registration_ownership",
		"email",
		"full_name",
		"identification_number",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCataloniaExemption := _CataloniaExemption{}

	err = json.Unmarshal(data, &varCataloniaExemption)

	if err != nil {
		return err
	}

	*o = CataloniaExemption(varCataloniaExemption)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "reason")
		delete(additionalProperties, "registration_ownership")
		delete(additionalProperties, "email")
		delete(additionalProperties, "full_name")
		delete(additionalProperties, "identification_number")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCataloniaExemption struct {
	value *CataloniaExemption
	isSet bool
}

func (v NullableCataloniaExemption) Get() *CataloniaExemption {
	return v.value
}

func (v *NullableCataloniaExemption) Set(val *CataloniaExemption) {
	v.value = val
	v.isSet = true
}

func (v NullableCataloniaExemption) IsSet() bool {
	return v.isSet
}

func (v *NullableCataloniaExemption) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCataloniaExemption(val *CataloniaExemption) *NullableCataloniaExemption {
	return &NullableCataloniaExemption{value: val, isSet: true}
}

func (v NullableCataloniaExemption) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCataloniaExemption) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


