/*
Polymorphism support

https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.3.md#schema-object

API version: 1.0.0
Contact: a-team@goarmy.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package polymorphism

import (
	"encoding/json"
	"fmt"
)

// checks if the ChicagoRegistration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChicagoRegistration{}

// ChicagoRegistration struct for ChicagoRegistration
type ChicagoRegistration struct {
	PermitNumber string `json:"permit_number"`
	AdditionalProperties map[string]interface{}
}

type _ChicagoRegistration ChicagoRegistration

// NewChicagoRegistration instantiates a new ChicagoRegistration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChicagoRegistration(permitNumber string) *ChicagoRegistration {
	this := ChicagoRegistration{}
	this.PermitNumber = permitNumber
	return &this
}

// NewChicagoRegistrationWithDefaults instantiates a new ChicagoRegistration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChicagoRegistrationWithDefaults() *ChicagoRegistration {
	this := ChicagoRegistration{}
	return &this
}

// GetPermitNumber returns the PermitNumber field value
func (o *ChicagoRegistration) GetPermitNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PermitNumber
}

// GetPermitNumberOk returns a tuple with the PermitNumber field value
// and a boolean to check if the value has been set.
func (o *ChicagoRegistration) GetPermitNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PermitNumber, true
}

// SetPermitNumber sets field value
func (o *ChicagoRegistration) SetPermitNumber(v string) {
	o.PermitNumber = v
}

func (o ChicagoRegistration) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChicagoRegistration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["permit_number"] = o.PermitNumber

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ChicagoRegistration) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"permit_number",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varChicagoRegistration := _ChicagoRegistration{}

	err = json.Unmarshal(data, &varChicagoRegistration)

	if err != nil {
		return err
	}

	*o = ChicagoRegistration(varChicagoRegistration)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "permit_number")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableChicagoRegistration struct {
	value *ChicagoRegistration
	isSet bool
}

func (v NullableChicagoRegistration) Get() *ChicagoRegistration {
	return v.value
}

func (v *NullableChicagoRegistration) Set(val *ChicagoRegistration) {
	v.value = val
	v.isSet = true
}

func (v NullableChicagoRegistration) IsSet() bool {
	return v.isSet
}

func (v *NullableChicagoRegistration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChicagoRegistration(val *ChicagoRegistration) *NullableChicagoRegistration {
	return &NullableChicagoRegistration{value: val, isSet: true}
}

func (v NullableChicagoRegistration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChicagoRegistration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


