/*
Polymorphism support

https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.3.md#schema-object

API version: 1.0.0
Contact: a-team@goarmy.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package polymorphism

import (
	"encoding/json"
	"fmt"
)

// checks if the BostonExemption type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BostonExemption{}

// BostonExemption struct for BostonExemption
type BostonExemption struct {
	ExemptionReason string `json:"exemption_reason"`
	ListingAddress string `json:"listing_address"`
	Attestation bool `json:"attestation"`
	AdditionalProperties map[string]interface{}
}

type _BostonExemption BostonExemption

// NewBostonExemption instantiates a new BostonExemption object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBostonExemption(exemptionReason string, listingAddress string, attestation bool) *BostonExemption {
	this := BostonExemption{}
	this.ExemptionReason = exemptionReason
	this.ListingAddress = listingAddress
	this.Attestation = attestation
	return &this
}

// NewBostonExemptionWithDefaults instantiates a new BostonExemption object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBostonExemptionWithDefaults() *BostonExemption {
	this := BostonExemption{}
	return &this
}

// GetExemptionReason returns the ExemptionReason field value
func (o *BostonExemption) GetExemptionReason() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ExemptionReason
}

// GetExemptionReasonOk returns a tuple with the ExemptionReason field value
// and a boolean to check if the value has been set.
func (o *BostonExemption) GetExemptionReasonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExemptionReason, true
}

// SetExemptionReason sets field value
func (o *BostonExemption) SetExemptionReason(v string) {
	o.ExemptionReason = v
}

// GetListingAddress returns the ListingAddress field value
func (o *BostonExemption) GetListingAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ListingAddress
}

// GetListingAddressOk returns a tuple with the ListingAddress field value
// and a boolean to check if the value has been set.
func (o *BostonExemption) GetListingAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ListingAddress, true
}

// SetListingAddress sets field value
func (o *BostonExemption) SetListingAddress(v string) {
	o.ListingAddress = v
}

// GetAttestation returns the Attestation field value
func (o *BostonExemption) GetAttestation() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Attestation
}

// GetAttestationOk returns a tuple with the Attestation field value
// and a boolean to check if the value has been set.
func (o *BostonExemption) GetAttestationOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Attestation, true
}

// SetAttestation sets field value
func (o *BostonExemption) SetAttestation(v bool) {
	o.Attestation = v
}

func (o BostonExemption) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BostonExemption) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["exemption_reason"] = o.ExemptionReason
	toSerialize["listing_address"] = o.ListingAddress
	toSerialize["attestation"] = o.Attestation

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *BostonExemption) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"exemption_reason",
		"listing_address",
		"attestation",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBostonExemption := _BostonExemption{}

	err = json.Unmarshal(data, &varBostonExemption)

	if err != nil {
		return err
	}

	*o = BostonExemption(varBostonExemption)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "exemption_reason")
		delete(additionalProperties, "listing_address")
		delete(additionalProperties, "attestation")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableBostonExemption struct {
	value *BostonExemption
	isSet bool
}

func (v NullableBostonExemption) Get() *BostonExemption {
	return v.value
}

func (v *NullableBostonExemption) Set(val *BostonExemption) {
	v.value = val
	v.isSet = true
}

func (v NullableBostonExemption) IsSet() bool {
	return v.isSet
}

func (v *NullableBostonExemption) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBostonExemption(val *BostonExemption) *NullableBostonExemption {
	return &NullableBostonExemption{value: val, isSet: true}
}

func (v NullableBostonExemption) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBostonExemption) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


