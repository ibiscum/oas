/*
Polymorphism support

https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.3.md#schema-object

API version: 1.0.0
Contact: a-team@goarmy.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package polymorphism

import (
	"encoding/json"
	"fmt"
)

// AnythingOneOfObjectRequest - struct for AnythingOneOfObjectRequest
type AnythingOneOfObjectRequest struct {
	FirstTypeOfObject *FirstTypeOfObject
	SecondTypeOfObject *SecondTypeOfObject
}

// FirstTypeOfObjectAsAnythingOneOfObjectRequest is a convenience function that returns FirstTypeOfObject wrapped in AnythingOneOfObjectRequest
func FirstTypeOfObjectAsAnythingOneOfObjectRequest(v *FirstTypeOfObject) AnythingOneOfObjectRequest {
	return AnythingOneOfObjectRequest{
		FirstTypeOfObject: v,
	}
}

// SecondTypeOfObjectAsAnythingOneOfObjectRequest is a convenience function that returns SecondTypeOfObject wrapped in AnythingOneOfObjectRequest
func SecondTypeOfObjectAsAnythingOneOfObjectRequest(v *SecondTypeOfObject) AnythingOneOfObjectRequest {
	return AnythingOneOfObjectRequest{
		SecondTypeOfObject: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *AnythingOneOfObjectRequest) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into FirstTypeOfObject
	err = newStrictDecoder(data).Decode(&dst.FirstTypeOfObject)
	if err == nil {
		jsonFirstTypeOfObject, _ := json.Marshal(dst.FirstTypeOfObject)
		if string(jsonFirstTypeOfObject) == "{}" { // empty struct
			dst.FirstTypeOfObject = nil
		} else {
			match++
		}
	} else {
		dst.FirstTypeOfObject = nil
	}

	// try to unmarshal data into SecondTypeOfObject
	err = newStrictDecoder(data).Decode(&dst.SecondTypeOfObject)
	if err == nil {
		jsonSecondTypeOfObject, _ := json.Marshal(dst.SecondTypeOfObject)
		if string(jsonSecondTypeOfObject) == "{}" { // empty struct
			dst.SecondTypeOfObject = nil
		} else {
			match++
		}
	} else {
		dst.SecondTypeOfObject = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.FirstTypeOfObject = nil
		dst.SecondTypeOfObject = nil

		return fmt.Errorf("data matches more than one schema in oneOf(AnythingOneOfObjectRequest)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(AnythingOneOfObjectRequest)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src AnythingOneOfObjectRequest) MarshalJSON() ([]byte, error) {
	if src.FirstTypeOfObject != nil {
		return json.Marshal(&src.FirstTypeOfObject)
	}

	if src.SecondTypeOfObject != nil {
		return json.Marshal(&src.SecondTypeOfObject)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *AnythingOneOfObjectRequest) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.FirstTypeOfObject != nil {
		return obj.FirstTypeOfObject
	}

	if obj.SecondTypeOfObject != nil {
		return obj.SecondTypeOfObject
	}

	// all schemas are nil
	return nil
}

type NullableAnythingOneOfObjectRequest struct {
	value *AnythingOneOfObjectRequest
	isSet bool
}

func (v NullableAnythingOneOfObjectRequest) Get() *AnythingOneOfObjectRequest {
	return v.value
}

func (v *NullableAnythingOneOfObjectRequest) Set(val *AnythingOneOfObjectRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAnythingOneOfObjectRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAnythingOneOfObjectRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAnythingOneOfObjectRequest(val *AnythingOneOfObjectRequest) *NullableAnythingOneOfObjectRequest {
	return &NullableAnythingOneOfObjectRequest{value: val, isSet: true}
}

func (v NullableAnythingOneOfObjectRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAnythingOneOfObjectRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


