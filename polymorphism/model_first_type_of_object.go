/*
Polymorphism support

https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.3.md#schema-object

API version: 1.0.0
Contact: a-team@goarmy.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package polymorphism

import (
	"encoding/json"
)

// checks if the FirstTypeOfObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FirstTypeOfObject{}

// FirstTypeOfObject struct for FirstTypeOfObject
type FirstTypeOfObject struct {
	A *string `json:"a,omitempty"`
	B *string `json:"b,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _FirstTypeOfObject FirstTypeOfObject

// NewFirstTypeOfObject instantiates a new FirstTypeOfObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFirstTypeOfObject() *FirstTypeOfObject {
	this := FirstTypeOfObject{}
	return &this
}

// NewFirstTypeOfObjectWithDefaults instantiates a new FirstTypeOfObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFirstTypeOfObjectWithDefaults() *FirstTypeOfObject {
	this := FirstTypeOfObject{}
	return &this
}

// GetA returns the A field value if set, zero value otherwise.
func (o *FirstTypeOfObject) GetA() string {
	if o == nil || IsNil(o.A) {
		var ret string
		return ret
	}
	return *o.A
}

// GetAOk returns a tuple with the A field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FirstTypeOfObject) GetAOk() (*string, bool) {
	if o == nil || IsNil(o.A) {
		return nil, false
	}
	return o.A, true
}

// HasA returns a boolean if a field has been set.
func (o *FirstTypeOfObject) HasA() bool {
	if o != nil && !IsNil(o.A) {
		return true
	}

	return false
}

// SetA gets a reference to the given string and assigns it to the A field.
func (o *FirstTypeOfObject) SetA(v string) {
	o.A = &v
}

// GetB returns the B field value if set, zero value otherwise.
func (o *FirstTypeOfObject) GetB() string {
	if o == nil || IsNil(o.B) {
		var ret string
		return ret
	}
	return *o.B
}

// GetBOk returns a tuple with the B field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FirstTypeOfObject) GetBOk() (*string, bool) {
	if o == nil || IsNil(o.B) {
		return nil, false
	}
	return o.B, true
}

// HasB returns a boolean if a field has been set.
func (o *FirstTypeOfObject) HasB() bool {
	if o != nil && !IsNil(o.B) {
		return true
	}

	return false
}

// SetB gets a reference to the given string and assigns it to the B field.
func (o *FirstTypeOfObject) SetB(v string) {
	o.B = &v
}

func (o FirstTypeOfObject) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FirstTypeOfObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.A) {
		toSerialize["a"] = o.A
	}
	if !IsNil(o.B) {
		toSerialize["b"] = o.B
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *FirstTypeOfObject) UnmarshalJSON(data []byte) (err error) {
	varFirstTypeOfObject := _FirstTypeOfObject{}

	err = json.Unmarshal(data, &varFirstTypeOfObject)

	if err != nil {
		return err
	}

	*o = FirstTypeOfObject(varFirstTypeOfObject)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "a")
		delete(additionalProperties, "b")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableFirstTypeOfObject struct {
	value *FirstTypeOfObject
	isSet bool
}

func (v NullableFirstTypeOfObject) Get() *FirstTypeOfObject {
	return v.value
}

func (v *NullableFirstTypeOfObject) Set(val *FirstTypeOfObject) {
	v.value = val
	v.isSet = true
}

func (v NullableFirstTypeOfObject) IsSet() bool {
	return v.isSet
}

func (v *NullableFirstTypeOfObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFirstTypeOfObject(val *FirstTypeOfObject) *NullableFirstTypeOfObject {
	return &NullableFirstTypeOfObject{value: val, isSet: true}
}

func (v NullableFirstTypeOfObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFirstTypeOfObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


