/*
Polymorphism support

https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.3.md#schema-object

API version: 1.0.0
Contact: a-team@goarmy.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package polymorphism

import (
	"encoding/json"
	"fmt"
)

// checks if the CubaAffiliation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CubaAffiliation{}

// CubaAffiliation struct for CubaAffiliation
type CubaAffiliation struct {
	AttestationEntrepreneur bool `json:"attestation_entrepreneur"`
	ListingAddress string `json:"listing_address"`
	AdditionalProperties map[string]interface{}
}

type _CubaAffiliation CubaAffiliation

// NewCubaAffiliation instantiates a new CubaAffiliation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCubaAffiliation(attestationEntrepreneur bool, listingAddress string) *CubaAffiliation {
	this := CubaAffiliation{}
	this.AttestationEntrepreneur = attestationEntrepreneur
	this.ListingAddress = listingAddress
	return &this
}

// NewCubaAffiliationWithDefaults instantiates a new CubaAffiliation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCubaAffiliationWithDefaults() *CubaAffiliation {
	this := CubaAffiliation{}
	return &this
}

// GetAttestationEntrepreneur returns the AttestationEntrepreneur field value
func (o *CubaAffiliation) GetAttestationEntrepreneur() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.AttestationEntrepreneur
}

// GetAttestationEntrepreneurOk returns a tuple with the AttestationEntrepreneur field value
// and a boolean to check if the value has been set.
func (o *CubaAffiliation) GetAttestationEntrepreneurOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AttestationEntrepreneur, true
}

// SetAttestationEntrepreneur sets field value
func (o *CubaAffiliation) SetAttestationEntrepreneur(v bool) {
	o.AttestationEntrepreneur = v
}

// GetListingAddress returns the ListingAddress field value
func (o *CubaAffiliation) GetListingAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ListingAddress
}

// GetListingAddressOk returns a tuple with the ListingAddress field value
// and a boolean to check if the value has been set.
func (o *CubaAffiliation) GetListingAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ListingAddress, true
}

// SetListingAddress sets field value
func (o *CubaAffiliation) SetListingAddress(v string) {
	o.ListingAddress = v
}

func (o CubaAffiliation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CubaAffiliation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["attestation_entrepreneur"] = o.AttestationEntrepreneur
	toSerialize["listing_address"] = o.ListingAddress

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CubaAffiliation) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"attestation_entrepreneur",
		"listing_address",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCubaAffiliation := _CubaAffiliation{}

	err = json.Unmarshal(data, &varCubaAffiliation)

	if err != nil {
		return err
	}

	*o = CubaAffiliation(varCubaAffiliation)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "attestation_entrepreneur")
		delete(additionalProperties, "listing_address")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCubaAffiliation struct {
	value *CubaAffiliation
	isSet bool
}

func (v NullableCubaAffiliation) Get() *CubaAffiliation {
	return v.value
}

func (v *NullableCubaAffiliation) Set(val *CubaAffiliation) {
	v.value = val
	v.isSet = true
}

func (v NullableCubaAffiliation) IsSet() bool {
	return v.isSet
}

func (v *NullableCubaAffiliation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCubaAffiliation(val *CubaAffiliation) *NullableCubaAffiliation {
	return &NullableCubaAffiliation{value: val, isSet: true}
}

func (v NullableCubaAffiliation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCubaAffiliation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


