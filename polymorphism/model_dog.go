/*
Polymorphism support

https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.3.md#schema-object

API version: 1.0.0
Contact: a-team@goarmy.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package polymorphism

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// checks if the Dog type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Dog{}

// Dog struct for Dog
type Dog struct {
	Pet
	PetType string `json:"pet_type"`
	Bark *bool `json:"bark,omitempty"`
	Breed *string `json:"breed,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Dog Dog

// NewDog instantiates a new Dog object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDog(petType string) *Dog {
	this := Dog{}
	this.PetType = petType
	return &this
}

// NewDogWithDefaults instantiates a new Dog object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDogWithDefaults() *Dog {
	this := Dog{}
	return &this
}

// GetPetType returns the PetType field value
func (o *Dog) GetPetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PetType
}

// GetPetTypeOk returns a tuple with the PetType field value
// and a boolean to check if the value has been set.
func (o *Dog) GetPetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PetType, true
}

// SetPetType sets field value
func (o *Dog) SetPetType(v string) {
	o.PetType = v
}

// GetBark returns the Bark field value if set, zero value otherwise.
func (o *Dog) GetBark() bool {
	if o == nil || IsNil(o.Bark) {
		var ret bool
		return ret
	}
	return *o.Bark
}

// GetBarkOk returns a tuple with the Bark field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dog) GetBarkOk() (*bool, bool) {
	if o == nil || IsNil(o.Bark) {
		return nil, false
	}
	return o.Bark, true
}

// HasBark returns a boolean if a field has been set.
func (o *Dog) HasBark() bool {
	if o != nil && !IsNil(o.Bark) {
		return true
	}

	return false
}

// SetBark gets a reference to the given bool and assigns it to the Bark field.
func (o *Dog) SetBark(v bool) {
	o.Bark = &v
}

// GetBreed returns the Breed field value if set, zero value otherwise.
func (o *Dog) GetBreed() string {
	if o == nil || IsNil(o.Breed) {
		var ret string
		return ret
	}
	return *o.Breed
}

// GetBreedOk returns a tuple with the Breed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dog) GetBreedOk() (*string, bool) {
	if o == nil || IsNil(o.Breed) {
		return nil, false
	}
	return o.Breed, true
}

// HasBreed returns a boolean if a field has been set.
func (o *Dog) HasBreed() bool {
	if o != nil && !IsNil(o.Breed) {
		return true
	}

	return false
}

// SetBreed gets a reference to the given string and assigns it to the Breed field.
func (o *Dog) SetBreed(v string) {
	o.Breed = &v
}

func (o Dog) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Dog) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedPet, errPet := json.Marshal(o.Pet)
	if errPet != nil {
		return map[string]interface{}{}, errPet
	}
	errPet = json.Unmarshal([]byte(serializedPet), &toSerialize)
	if errPet != nil {
		return map[string]interface{}{}, errPet
	}
	toSerialize["pet_type"] = o.PetType
	if !IsNil(o.Bark) {
		toSerialize["bark"] = o.Bark
	}
	if !IsNil(o.Breed) {
		toSerialize["breed"] = o.Breed
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Dog) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"pet_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	type DogWithoutEmbeddedStruct struct {
		PetType string `json:"pet_type"`
		Bark *bool `json:"bark,omitempty"`
		Breed *string `json:"breed,omitempty"`
	}

	varDogWithoutEmbeddedStruct := DogWithoutEmbeddedStruct{}

	err = json.Unmarshal(data, &varDogWithoutEmbeddedStruct)
	if err == nil {
		varDog := _Dog{}
		varDog.PetType = varDogWithoutEmbeddedStruct.PetType
		varDog.Bark = varDogWithoutEmbeddedStruct.Bark
		varDog.Breed = varDogWithoutEmbeddedStruct.Breed
		*o = Dog(varDog)
	} else {
		return err
	}

	varDog := _Dog{}

	err = json.Unmarshal(data, &varDog)
	if err == nil {
		o.Pet = varDog.Pet
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "pet_type")
		delete(additionalProperties, "bark")
		delete(additionalProperties, "breed")

		// remove fields from embedded structs
		reflectPet := reflect.ValueOf(o.Pet)
		for i := 0; i < reflectPet.Type().NumField(); i++ {
			t := reflectPet.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDog struct {
	value *Dog
	isSet bool
}

func (v NullableDog) Get() *Dog {
	return v.value
}

func (v *NullableDog) Set(val *Dog) {
	v.value = val
	v.isSet = true
}

func (v NullableDog) IsSet() bool {
	return v.isSet
}

func (v *NullableDog) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDog(val *Dog) *NullableDog {
	return &NullableDog{value: val, isSet: true}
}

func (v NullableDog) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDog) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


