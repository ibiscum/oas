/*
Polymorphism support

https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.3.md#schema-object

API version: 1.0.0
Contact: a-team@goarmy.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package polymorphism

import (
	"encoding/json"
)

// checks if the Object2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Object2{}

// Object2 struct for Object2
type Object2 struct {
	C *string `json:"c,omitempty"`
	D *string `json:"d,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Object2 Object2

// NewObject2 instantiates a new Object2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObject2() *Object2 {
	this := Object2{}
	return &this
}

// NewObject2WithDefaults instantiates a new Object2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObject2WithDefaults() *Object2 {
	this := Object2{}
	return &this
}

// GetC returns the C field value if set, zero value otherwise.
func (o *Object2) GetC() string {
	if o == nil || IsNil(o.C) {
		var ret string
		return ret
	}
	return *o.C
}

// GetCOk returns a tuple with the C field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Object2) GetCOk() (*string, bool) {
	if o == nil || IsNil(o.C) {
		return nil, false
	}
	return o.C, true
}

// HasC returns a boolean if a field has been set.
func (o *Object2) HasC() bool {
	if o != nil && !IsNil(o.C) {
		return true
	}

	return false
}

// SetC gets a reference to the given string and assigns it to the C field.
func (o *Object2) SetC(v string) {
	o.C = &v
}

// GetD returns the D field value if set, zero value otherwise.
func (o *Object2) GetD() string {
	if o == nil || IsNil(o.D) {
		var ret string
		return ret
	}
	return *o.D
}

// GetDOk returns a tuple with the D field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Object2) GetDOk() (*string, bool) {
	if o == nil || IsNil(o.D) {
		return nil, false
	}
	return o.D, true
}

// HasD returns a boolean if a field has been set.
func (o *Object2) HasD() bool {
	if o != nil && !IsNil(o.D) {
		return true
	}

	return false
}

// SetD gets a reference to the given string and assigns it to the D field.
func (o *Object2) SetD(v string) {
	o.D = &v
}

func (o Object2) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Object2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.C) {
		toSerialize["c"] = o.C
	}
	if !IsNil(o.D) {
		toSerialize["d"] = o.D
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Object2) UnmarshalJSON(data []byte) (err error) {
	varObject2 := _Object2{}

	err = json.Unmarshal(data, &varObject2)

	if err != nil {
		return err
	}

	*o = Object2(varObject2)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "c")
		delete(additionalProperties, "d")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableObject2 struct {
	value *Object2
	isSet bool
}

func (v NullableObject2) Get() *Object2 {
	return v.value
}

func (v *NullableObject2) Set(val *Object2) {
	v.value = val
	v.isSet = true
}

func (v NullableObject2) IsSet() bool {
	return v.isSet
}

func (v *NullableObject2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObject2(val *Object2) *NullableObject2 {
	return &NullableObject2{value: val, isSet: true}
}

func (v NullableObject2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObject2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


