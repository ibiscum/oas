/*
Responses with various schema formats

https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.3.md#schema-object

API version: 1.0
Contact: a-team@goarmy.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package complex_nesting

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// ChickenNuggetsAPIService ChickenNuggetsAPI service
type ChickenNuggetsAPIService service

type ApiPostAnythingRequest struct {
	ctx context.Context
	ApiService *ChickenNuggetsAPIService
	arrayOfFlatObjects *ArrayOfFlatObjects
}

func (r ApiPostAnythingRequest) ArrayOfFlatObjects(arrayOfFlatObjects ArrayOfFlatObjects) ApiPostAnythingRequest {
	r.arrayOfFlatObjects = &arrayOfFlatObjects
	return r
}

func (r ApiPostAnythingRequest) Execute() (*ArrayOfFlatObjects, *http.Response, error) {
	return r.ApiService.PostAnythingExecute(r)
}

/*
PostAnything Simple Array

This payload is an array containing a simple flat object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostAnythingRequest
*/
func (a *ChickenNuggetsAPIService) PostAnything(ctx context.Context) ApiPostAnythingRequest {
	return ApiPostAnythingRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ArrayOfFlatObjects
func (a *ChickenNuggetsAPIService) PostAnythingExecute(r ApiPostAnythingRequest) (*ArrayOfFlatObjects, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ArrayOfFlatObjects
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ChickenNuggetsAPIService.PostAnything")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/anything/top-level-array"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.arrayOfFlatObjects
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostAnythingSimpleRequest struct {
	ctx context.Context
	ApiService *ChickenNuggetsAPIService
	postAnythingSimpleRequest *PostAnythingSimpleRequest
}

func (r ApiPostAnythingSimpleRequest) PostAnythingSimpleRequest(postAnythingSimpleRequest PostAnythingSimpleRequest) ApiPostAnythingSimpleRequest {
	r.postAnythingSimpleRequest = &postAnythingSimpleRequest
	return r
}

func (r ApiPostAnythingSimpleRequest) Execute() (*PostAnythingSimple200Response, *http.Response, error) {
	return r.ApiService.PostAnythingSimpleExecute(r)
}

/*
PostAnythingSimple Simple Object

This payload is an object comprised of simple flat objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostAnythingSimpleRequest
*/
func (a *ChickenNuggetsAPIService) PostAnythingSimple(ctx context.Context) ApiPostAnythingSimpleRequest {
	return ApiPostAnythingSimpleRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PostAnythingSimple200Response
func (a *ChickenNuggetsAPIService) PostAnythingSimpleExecute(r ApiPostAnythingSimpleRequest) (*PostAnythingSimple200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PostAnythingSimple200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ChickenNuggetsAPIService.PostAnythingSimple")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/anything/top-level-object/simple"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.postAnythingSimpleRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostMultiSchemaOfEverythingRequest struct {
	ctx context.Context
	ApiService *ChickenNuggetsAPIService
	multischemaOfEverything *MultischemaOfEverything
}

func (r ApiPostMultiSchemaOfEverythingRequest) MultischemaOfEverything(multischemaOfEverything MultischemaOfEverything) ApiPostMultiSchemaOfEverythingRequest {
	r.multischemaOfEverything = &multischemaOfEverything
	return r
}

func (r ApiPostMultiSchemaOfEverythingRequest) Execute() (*MultischemaOfEverything, *http.Response, error) {
	return r.ApiService.PostMultiSchemaOfEverythingExecute(r)
}

/*
PostMultiSchemaOfEverything Multischema of Everything

Multischema of Everything

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostMultiSchemaOfEverythingRequest
*/
func (a *ChickenNuggetsAPIService) PostMultiSchemaOfEverything(ctx context.Context) ApiPostMultiSchemaOfEverythingRequest {
	return ApiPostMultiSchemaOfEverythingRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MultischemaOfEverything
func (a *ChickenNuggetsAPIService) PostMultiSchemaOfEverythingExecute(r ApiPostMultiSchemaOfEverythingRequest) (*MultischemaOfEverything, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MultischemaOfEverything
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ChickenNuggetsAPIService.PostMultiSchemaOfEverything")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/multischema/of-everything"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.multischemaOfEverything
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostObjectOfEverythingRequest struct {
	ctx context.Context
	ApiService *ChickenNuggetsAPIService
	objectOfEverything *ObjectOfEverything
}

func (r ApiPostObjectOfEverythingRequest) ObjectOfEverything(objectOfEverything ObjectOfEverything) ApiPostObjectOfEverythingRequest {
	r.objectOfEverything = &objectOfEverything
	return r
}

func (r ApiPostObjectOfEverythingRequest) Execute() (*ObjectOfEverything, *http.Response, error) {
	return r.ApiService.PostObjectOfEverythingExecute(r)
}

/*
PostObjectOfEverything Object of

This payload is an object of everything.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostObjectOfEverythingRequest
*/
func (a *ChickenNuggetsAPIService) PostObjectOfEverything(ctx context.Context) ApiPostObjectOfEverythingRequest {
	return ApiPostObjectOfEverythingRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ObjectOfEverything
func (a *ChickenNuggetsAPIService) PostObjectOfEverythingExecute(r ApiPostObjectOfEverythingRequest) (*ObjectOfEverything, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ObjectOfEverything
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ChickenNuggetsAPIService.PostObjectOfEverything")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/top-level-object/of-everything"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.objectOfEverything
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutAnythingRequest struct {
	ctx context.Context
	ApiService *ChickenNuggetsAPIService
	objectOfEverything *[]ObjectOfEverything
}

func (r ApiPutAnythingRequest) ObjectOfEverything(objectOfEverything []ObjectOfEverything) ApiPutAnythingRequest {
	r.objectOfEverything = &objectOfEverything
	return r
}

func (r ApiPutAnythingRequest) Execute() ([]ObjectOfEverything, *http.Response, error) {
	return r.ApiService.PutAnythingExecute(r)
}

/*
PutAnything Array of Everything

This payload is an array containing a complex payload of arrays, objects, and primitives.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPutAnythingRequest
*/
func (a *ChickenNuggetsAPIService) PutAnything(ctx context.Context) ApiPutAnythingRequest {
	return ApiPutAnythingRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []ObjectOfEverything
func (a *ChickenNuggetsAPIService) PutAnythingExecute(r ApiPutAnythingRequest) ([]ObjectOfEverything, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ObjectOfEverything
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ChickenNuggetsAPIService.PutAnything")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/anything/top-level-array"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.objectOfEverything
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
