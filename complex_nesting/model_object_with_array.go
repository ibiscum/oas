/*
Responses with various schema formats

https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.3.md#schema-object

API version: 1.0
Contact: a-team@goarmy.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package complex_nesting

import (
	"encoding/json"
)

// checks if the ObjectWithArray type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ObjectWithArray{}

// ObjectWithArray Metadata for defining additional objects related to your API
type ObjectWithArray struct {
	Array []ArrayInner `json:"Array,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ObjectWithArray ObjectWithArray

// NewObjectWithArray instantiates a new ObjectWithArray object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObjectWithArray() *ObjectWithArray {
	this := ObjectWithArray{}
	return &this
}

// NewObjectWithArrayWithDefaults instantiates a new ObjectWithArray object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObjectWithArrayWithDefaults() *ObjectWithArray {
	this := ObjectWithArray{}
	return &this
}

// GetArray returns the Array field value if set, zero value otherwise.
func (o *ObjectWithArray) GetArray() []ArrayInner {
	if o == nil || IsNil(o.Array) {
		var ret []ArrayInner
		return ret
	}
	return o.Array
}

// GetArrayOk returns a tuple with the Array field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectWithArray) GetArrayOk() ([]ArrayInner, bool) {
	if o == nil || IsNil(o.Array) {
		return nil, false
	}
	return o.Array, true
}

// HasArray returns a boolean if a field has been set.
func (o *ObjectWithArray) HasArray() bool {
	if o != nil && !IsNil(o.Array) {
		return true
	}

	return false
}

// SetArray gets a reference to the given []ArrayInner and assigns it to the Array field.
func (o *ObjectWithArray) SetArray(v []ArrayInner) {
	o.Array = v
}

func (o ObjectWithArray) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ObjectWithArray) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Array) {
		toSerialize["Array"] = o.Array
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ObjectWithArray) UnmarshalJSON(data []byte) (err error) {
	varObjectWithArray := _ObjectWithArray{}

	err = json.Unmarshal(data, &varObjectWithArray)

	if err != nil {
		return err
	}

	*o = ObjectWithArray(varObjectWithArray)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "Array")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableObjectWithArray struct {
	value *ObjectWithArray
	isSet bool
}

func (v NullableObjectWithArray) Get() *ObjectWithArray {
	return v.value
}

func (v *NullableObjectWithArray) Set(val *ObjectWithArray) {
	v.value = val
	v.isSet = true
}

func (v NullableObjectWithArray) IsSet() bool {
	return v.isSet
}

func (v *NullableObjectWithArray) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObjectWithArray(val *ObjectWithArray) *NullableObjectWithArray {
	return &NullableObjectWithArray{value: val, isSet: true}
}

func (v NullableObjectWithArray) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObjectWithArray) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


