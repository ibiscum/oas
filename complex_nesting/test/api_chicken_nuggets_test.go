/*
Responses with various schema formats

Testing ChickenNuggetsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package complex_nesting

import (
	"context"
	"testing"

	openapiclient "github.com/ibiscum/oas/complex_nesting"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_complex_nesting_ChickenNuggetsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ChickenNuggetsAPIService PostAnything", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.ChickenNuggetsAPI.PostAnything(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChickenNuggetsAPIService PostAnythingSimple", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.ChickenNuggetsAPI.PostAnythingSimple(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChickenNuggetsAPIService PostMultiSchemaOfEverything", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.ChickenNuggetsAPI.PostMultiSchemaOfEverything(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChickenNuggetsAPIService PostObjectOfEverything", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.ChickenNuggetsAPI.PostObjectOfEverything(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChickenNuggetsAPIService PutAnything", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.ChickenNuggetsAPI.PutAnything(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
