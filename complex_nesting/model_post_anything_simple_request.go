/*
Responses with various schema formats

https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.3.md#schema-object

API version: 1.0
Contact: a-team@goarmy.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package complex_nesting

import (
	"encoding/json"
)

// checks if the PostAnythingSimpleRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PostAnythingSimpleRequest{}

// PostAnythingSimpleRequest struct for PostAnythingSimpleRequest
type PostAnythingSimpleRequest struct {
	NestedObject1 *FlatObject `json:"nestedObject_1,omitempty"`
	NestedObject2 *FlatObject `json:"nestedObject_2,omitempty"`
	NestedObject3 *FlatObject `json:"nestedObject_3,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PostAnythingSimpleRequest PostAnythingSimpleRequest

// NewPostAnythingSimpleRequest instantiates a new PostAnythingSimpleRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPostAnythingSimpleRequest() *PostAnythingSimpleRequest {
	this := PostAnythingSimpleRequest{}
	return &this
}

// NewPostAnythingSimpleRequestWithDefaults instantiates a new PostAnythingSimpleRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPostAnythingSimpleRequestWithDefaults() *PostAnythingSimpleRequest {
	this := PostAnythingSimpleRequest{}
	return &this
}

// GetNestedObject1 returns the NestedObject1 field value if set, zero value otherwise.
func (o *PostAnythingSimpleRequest) GetNestedObject1() FlatObject {
	if o == nil || IsNil(o.NestedObject1) {
		var ret FlatObject
		return ret
	}
	return *o.NestedObject1
}

// GetNestedObject1Ok returns a tuple with the NestedObject1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostAnythingSimpleRequest) GetNestedObject1Ok() (*FlatObject, bool) {
	if o == nil || IsNil(o.NestedObject1) {
		return nil, false
	}
	return o.NestedObject1, true
}

// HasNestedObject1 returns a boolean if a field has been set.
func (o *PostAnythingSimpleRequest) HasNestedObject1() bool {
	if o != nil && !IsNil(o.NestedObject1) {
		return true
	}

	return false
}

// SetNestedObject1 gets a reference to the given FlatObject and assigns it to the NestedObject1 field.
func (o *PostAnythingSimpleRequest) SetNestedObject1(v FlatObject) {
	o.NestedObject1 = &v
}

// GetNestedObject2 returns the NestedObject2 field value if set, zero value otherwise.
func (o *PostAnythingSimpleRequest) GetNestedObject2() FlatObject {
	if o == nil || IsNil(o.NestedObject2) {
		var ret FlatObject
		return ret
	}
	return *o.NestedObject2
}

// GetNestedObject2Ok returns a tuple with the NestedObject2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostAnythingSimpleRequest) GetNestedObject2Ok() (*FlatObject, bool) {
	if o == nil || IsNil(o.NestedObject2) {
		return nil, false
	}
	return o.NestedObject2, true
}

// HasNestedObject2 returns a boolean if a field has been set.
func (o *PostAnythingSimpleRequest) HasNestedObject2() bool {
	if o != nil && !IsNil(o.NestedObject2) {
		return true
	}

	return false
}

// SetNestedObject2 gets a reference to the given FlatObject and assigns it to the NestedObject2 field.
func (o *PostAnythingSimpleRequest) SetNestedObject2(v FlatObject) {
	o.NestedObject2 = &v
}

// GetNestedObject3 returns the NestedObject3 field value if set, zero value otherwise.
func (o *PostAnythingSimpleRequest) GetNestedObject3() FlatObject {
	if o == nil || IsNil(o.NestedObject3) {
		var ret FlatObject
		return ret
	}
	return *o.NestedObject3
}

// GetNestedObject3Ok returns a tuple with the NestedObject3 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostAnythingSimpleRequest) GetNestedObject3Ok() (*FlatObject, bool) {
	if o == nil || IsNil(o.NestedObject3) {
		return nil, false
	}
	return o.NestedObject3, true
}

// HasNestedObject3 returns a boolean if a field has been set.
func (o *PostAnythingSimpleRequest) HasNestedObject3() bool {
	if o != nil && !IsNil(o.NestedObject3) {
		return true
	}

	return false
}

// SetNestedObject3 gets a reference to the given FlatObject and assigns it to the NestedObject3 field.
func (o *PostAnythingSimpleRequest) SetNestedObject3(v FlatObject) {
	o.NestedObject3 = &v
}

func (o PostAnythingSimpleRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PostAnythingSimpleRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.NestedObject1) {
		toSerialize["nestedObject_1"] = o.NestedObject1
	}
	if !IsNil(o.NestedObject2) {
		toSerialize["nestedObject_2"] = o.NestedObject2
	}
	if !IsNil(o.NestedObject3) {
		toSerialize["nestedObject_3"] = o.NestedObject3
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PostAnythingSimpleRequest) UnmarshalJSON(data []byte) (err error) {
	varPostAnythingSimpleRequest := _PostAnythingSimpleRequest{}

	err = json.Unmarshal(data, &varPostAnythingSimpleRequest)

	if err != nil {
		return err
	}

	*o = PostAnythingSimpleRequest(varPostAnythingSimpleRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "nestedObject_1")
		delete(additionalProperties, "nestedObject_2")
		delete(additionalProperties, "nestedObject_3")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePostAnythingSimpleRequest struct {
	value *PostAnythingSimpleRequest
	isSet bool
}

func (v NullablePostAnythingSimpleRequest) Get() *PostAnythingSimpleRequest {
	return v.value
}

func (v *NullablePostAnythingSimpleRequest) Set(val *PostAnythingSimpleRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePostAnythingSimpleRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePostAnythingSimpleRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostAnythingSimpleRequest(val *PostAnythingSimpleRequest) *NullablePostAnythingSimpleRequest {
	return &NullablePostAnythingSimpleRequest{value: val, isSet: true}
}

func (v NullablePostAnythingSimpleRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostAnythingSimpleRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


