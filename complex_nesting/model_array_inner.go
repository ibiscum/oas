/*
Responses with various schema formats

https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.3.md#schema-object

API version: 1.0
Contact: a-team@goarmy.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package complex_nesting

import (
	"encoding/json"
)

// checks if the ArrayInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ArrayInner{}

// ArrayInner struct for ArrayInner
type ArrayInner struct {
	Inputs []ArrayInnerInputsInner `json:"inputs,omitempty"`
	Nums []int32 `json:"nums,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ArrayInner ArrayInner

// NewArrayInner instantiates a new ArrayInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewArrayInner() *ArrayInner {
	this := ArrayInner{}
	return &this
}

// NewArrayInnerWithDefaults instantiates a new ArrayInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewArrayInnerWithDefaults() *ArrayInner {
	this := ArrayInner{}
	return &this
}

// GetInputs returns the Inputs field value if set, zero value otherwise.
func (o *ArrayInner) GetInputs() []ArrayInnerInputsInner {
	if o == nil || IsNil(o.Inputs) {
		var ret []ArrayInnerInputsInner
		return ret
	}
	return o.Inputs
}

// GetInputsOk returns a tuple with the Inputs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArrayInner) GetInputsOk() ([]ArrayInnerInputsInner, bool) {
	if o == nil || IsNil(o.Inputs) {
		return nil, false
	}
	return o.Inputs, true
}

// HasInputs returns a boolean if a field has been set.
func (o *ArrayInner) HasInputs() bool {
	if o != nil && !IsNil(o.Inputs) {
		return true
	}

	return false
}

// SetInputs gets a reference to the given []ArrayInnerInputsInner and assigns it to the Inputs field.
func (o *ArrayInner) SetInputs(v []ArrayInnerInputsInner) {
	o.Inputs = v
}

// GetNums returns the Nums field value if set, zero value otherwise.
func (o *ArrayInner) GetNums() []int32 {
	if o == nil || IsNil(o.Nums) {
		var ret []int32
		return ret
	}
	return o.Nums
}

// GetNumsOk returns a tuple with the Nums field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArrayInner) GetNumsOk() ([]int32, bool) {
	if o == nil || IsNil(o.Nums) {
		return nil, false
	}
	return o.Nums, true
}

// HasNums returns a boolean if a field has been set.
func (o *ArrayInner) HasNums() bool {
	if o != nil && !IsNil(o.Nums) {
		return true
	}

	return false
}

// SetNums gets a reference to the given []int32 and assigns it to the Nums field.
func (o *ArrayInner) SetNums(v []int32) {
	o.Nums = v
}

func (o ArrayInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ArrayInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Inputs) {
		toSerialize["inputs"] = o.Inputs
	}
	if !IsNil(o.Nums) {
		toSerialize["nums"] = o.Nums
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ArrayInner) UnmarshalJSON(data []byte) (err error) {
	varArrayInner := _ArrayInner{}

	err = json.Unmarshal(data, &varArrayInner)

	if err != nil {
		return err
	}

	*o = ArrayInner(varArrayInner)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "inputs")
		delete(additionalProperties, "nums")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableArrayInner struct {
	value *ArrayInner
	isSet bool
}

func (v NullableArrayInner) Get() *ArrayInner {
	return v.value
}

func (v *NullableArrayInner) Set(val *ArrayInner) {
	v.value = val
	v.isSet = true
}

func (v NullableArrayInner) IsSet() bool {
	return v.isSet
}

func (v *NullableArrayInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableArrayInner(val *ArrayInner) *NullableArrayInner {
	return &NullableArrayInner{value: val, isSet: true}
}

func (v NullableArrayInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableArrayInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


