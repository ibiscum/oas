/*
Responses with various schema formats

https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.3.md#schema-object

API version: 1.0
Contact: a-team@goarmy.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package complex_nesting

import (
	"encoding/json"
)

// checks if the ObjectOfEverything type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ObjectOfEverything{}

// ObjectOfEverything struct for ObjectOfEverything
type ObjectOfEverything struct {
	ObjectOfObjectsAndArrays *ObjectOfObjectsAndArrays `json:"objectOfObjectsAndArrays,omitempty"`
	ArrayOfObjectsOfObjectsAndArrays *ArrayOfObjectsOfObjectsAndArrays `json:"arrayOfObjectsOfObjectsAndArrays,omitempty"`
	ObjectOfAdditionalProperties *ObjectOfAdditionalPropertiesObjectPolymorphism `json:"objectOfAdditionalProperties,omitempty"`
	String *string `json:"string,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ObjectOfEverything ObjectOfEverything

// NewObjectOfEverything instantiates a new ObjectOfEverything object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObjectOfEverything() *ObjectOfEverything {
	this := ObjectOfEverything{}
	return &this
}

// NewObjectOfEverythingWithDefaults instantiates a new ObjectOfEverything object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObjectOfEverythingWithDefaults() *ObjectOfEverything {
	this := ObjectOfEverything{}
	return &this
}

// GetObjectOfObjectsAndArrays returns the ObjectOfObjectsAndArrays field value if set, zero value otherwise.
func (o *ObjectOfEverything) GetObjectOfObjectsAndArrays() ObjectOfObjectsAndArrays {
	if o == nil || IsNil(o.ObjectOfObjectsAndArrays) {
		var ret ObjectOfObjectsAndArrays
		return ret
	}
	return *o.ObjectOfObjectsAndArrays
}

// GetObjectOfObjectsAndArraysOk returns a tuple with the ObjectOfObjectsAndArrays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectOfEverything) GetObjectOfObjectsAndArraysOk() (*ObjectOfObjectsAndArrays, bool) {
	if o == nil || IsNil(o.ObjectOfObjectsAndArrays) {
		return nil, false
	}
	return o.ObjectOfObjectsAndArrays, true
}

// HasObjectOfObjectsAndArrays returns a boolean if a field has been set.
func (o *ObjectOfEverything) HasObjectOfObjectsAndArrays() bool {
	if o != nil && !IsNil(o.ObjectOfObjectsAndArrays) {
		return true
	}

	return false
}

// SetObjectOfObjectsAndArrays gets a reference to the given ObjectOfObjectsAndArrays and assigns it to the ObjectOfObjectsAndArrays field.
func (o *ObjectOfEverything) SetObjectOfObjectsAndArrays(v ObjectOfObjectsAndArrays) {
	o.ObjectOfObjectsAndArrays = &v
}

// GetArrayOfObjectsOfObjectsAndArrays returns the ArrayOfObjectsOfObjectsAndArrays field value if set, zero value otherwise.
func (o *ObjectOfEverything) GetArrayOfObjectsOfObjectsAndArrays() ArrayOfObjectsOfObjectsAndArrays {
	if o == nil || IsNil(o.ArrayOfObjectsOfObjectsAndArrays) {
		var ret ArrayOfObjectsOfObjectsAndArrays
		return ret
	}
	return *o.ArrayOfObjectsOfObjectsAndArrays
}

// GetArrayOfObjectsOfObjectsAndArraysOk returns a tuple with the ArrayOfObjectsOfObjectsAndArrays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectOfEverything) GetArrayOfObjectsOfObjectsAndArraysOk() (*ArrayOfObjectsOfObjectsAndArrays, bool) {
	if o == nil || IsNil(o.ArrayOfObjectsOfObjectsAndArrays) {
		return nil, false
	}
	return o.ArrayOfObjectsOfObjectsAndArrays, true
}

// HasArrayOfObjectsOfObjectsAndArrays returns a boolean if a field has been set.
func (o *ObjectOfEverything) HasArrayOfObjectsOfObjectsAndArrays() bool {
	if o != nil && !IsNil(o.ArrayOfObjectsOfObjectsAndArrays) {
		return true
	}

	return false
}

// SetArrayOfObjectsOfObjectsAndArrays gets a reference to the given ArrayOfObjectsOfObjectsAndArrays and assigns it to the ArrayOfObjectsOfObjectsAndArrays field.
func (o *ObjectOfEverything) SetArrayOfObjectsOfObjectsAndArrays(v ArrayOfObjectsOfObjectsAndArrays) {
	o.ArrayOfObjectsOfObjectsAndArrays = &v
}

// GetObjectOfAdditionalProperties returns the ObjectOfAdditionalProperties field value if set, zero value otherwise.
func (o *ObjectOfEverything) GetObjectOfAdditionalProperties() ObjectOfAdditionalPropertiesObjectPolymorphism {
	if o == nil || IsNil(o.ObjectOfAdditionalProperties) {
		var ret ObjectOfAdditionalPropertiesObjectPolymorphism
		return ret
	}
	return *o.ObjectOfAdditionalProperties
}

// GetObjectOfAdditionalPropertiesOk returns a tuple with the ObjectOfAdditionalProperties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectOfEverything) GetObjectOfAdditionalPropertiesOk() (*ObjectOfAdditionalPropertiesObjectPolymorphism, bool) {
	if o == nil || IsNil(o.ObjectOfAdditionalProperties) {
		return nil, false
	}
	return o.ObjectOfAdditionalProperties, true
}

// HasObjectOfAdditionalProperties returns a boolean if a field has been set.
func (o *ObjectOfEverything) HasObjectOfAdditionalProperties() bool {
	if o != nil && !IsNil(o.ObjectOfAdditionalProperties) {
		return true
	}

	return false
}

// SetObjectOfAdditionalProperties gets a reference to the given ObjectOfAdditionalPropertiesObjectPolymorphism and assigns it to the ObjectOfAdditionalProperties field.
func (o *ObjectOfEverything) SetObjectOfAdditionalProperties(v ObjectOfAdditionalPropertiesObjectPolymorphism) {
	o.ObjectOfAdditionalProperties = &v
}

// GetString returns the String field value if set, zero value otherwise.
func (o *ObjectOfEverything) GetString() string {
	if o == nil || IsNil(o.String) {
		var ret string
		return ret
	}
	return *o.String
}

// GetStringOk returns a tuple with the String field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectOfEverything) GetStringOk() (*string, bool) {
	if o == nil || IsNil(o.String) {
		return nil, false
	}
	return o.String, true
}

// HasString returns a boolean if a field has been set.
func (o *ObjectOfEverything) HasString() bool {
	if o != nil && !IsNil(o.String) {
		return true
	}

	return false
}

// SetString gets a reference to the given string and assigns it to the String field.
func (o *ObjectOfEverything) SetString(v string) {
	o.String = &v
}

func (o ObjectOfEverything) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ObjectOfEverything) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ObjectOfObjectsAndArrays) {
		toSerialize["objectOfObjectsAndArrays"] = o.ObjectOfObjectsAndArrays
	}
	if !IsNil(o.ArrayOfObjectsOfObjectsAndArrays) {
		toSerialize["arrayOfObjectsOfObjectsAndArrays"] = o.ArrayOfObjectsOfObjectsAndArrays
	}
	if !IsNil(o.ObjectOfAdditionalProperties) {
		toSerialize["objectOfAdditionalProperties"] = o.ObjectOfAdditionalProperties
	}
	if !IsNil(o.String) {
		toSerialize["string"] = o.String
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ObjectOfEverything) UnmarshalJSON(data []byte) (err error) {
	varObjectOfEverything := _ObjectOfEverything{}

	err = json.Unmarshal(data, &varObjectOfEverything)

	if err != nil {
		return err
	}

	*o = ObjectOfEverything(varObjectOfEverything)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "objectOfObjectsAndArrays")
		delete(additionalProperties, "arrayOfObjectsOfObjectsAndArrays")
		delete(additionalProperties, "objectOfAdditionalProperties")
		delete(additionalProperties, "string")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableObjectOfEverything struct {
	value *ObjectOfEverything
	isSet bool
}

func (v NullableObjectOfEverything) Get() *ObjectOfEverything {
	return v.value
}

func (v *NullableObjectOfEverything) Set(val *ObjectOfEverything) {
	v.value = val
	v.isSet = true
}

func (v NullableObjectOfEverything) IsSet() bool {
	return v.isSet
}

func (v *NullableObjectOfEverything) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObjectOfEverything(val *ObjectOfEverything) *NullableObjectOfEverything {
	return &NullableObjectOfEverything{value: val, isSet: true}
}

func (v NullableObjectOfEverything) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObjectOfEverything) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


