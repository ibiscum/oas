/*
Responses with various schema formats

https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.3.md#schema-object

API version: 1.0
Contact: a-team@goarmy.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package complex_nesting

import (
	"encoding/json"
)

// checks if the ObjectOfObjectsAndArrays type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ObjectOfObjectsAndArrays{}

// ObjectOfObjectsAndArrays Object containing objects and arrays
type ObjectOfObjectsAndArrays struct {
	SingleObject *FlatObject `json:"singleObject,omitempty"`
	ArrayOfPrimitives *ArrayOfPrimitives `json:"arrayOfPrimitives,omitempty"`
	ArrayOfObjects *ArrayOfFlatObjects `json:"arrayOfObjects,omitempty"`
	Primitive *string `json:"primitive,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ObjectOfObjectsAndArrays ObjectOfObjectsAndArrays

// NewObjectOfObjectsAndArrays instantiates a new ObjectOfObjectsAndArrays object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObjectOfObjectsAndArrays() *ObjectOfObjectsAndArrays {
	this := ObjectOfObjectsAndArrays{}
	return &this
}

// NewObjectOfObjectsAndArraysWithDefaults instantiates a new ObjectOfObjectsAndArrays object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObjectOfObjectsAndArraysWithDefaults() *ObjectOfObjectsAndArrays {
	this := ObjectOfObjectsAndArrays{}
	return &this
}

// GetSingleObject returns the SingleObject field value if set, zero value otherwise.
func (o *ObjectOfObjectsAndArrays) GetSingleObject() FlatObject {
	if o == nil || IsNil(o.SingleObject) {
		var ret FlatObject
		return ret
	}
	return *o.SingleObject
}

// GetSingleObjectOk returns a tuple with the SingleObject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectOfObjectsAndArrays) GetSingleObjectOk() (*FlatObject, bool) {
	if o == nil || IsNil(o.SingleObject) {
		return nil, false
	}
	return o.SingleObject, true
}

// HasSingleObject returns a boolean if a field has been set.
func (o *ObjectOfObjectsAndArrays) HasSingleObject() bool {
	if o != nil && !IsNil(o.SingleObject) {
		return true
	}

	return false
}

// SetSingleObject gets a reference to the given FlatObject and assigns it to the SingleObject field.
func (o *ObjectOfObjectsAndArrays) SetSingleObject(v FlatObject) {
	o.SingleObject = &v
}

// GetArrayOfPrimitives returns the ArrayOfPrimitives field value if set, zero value otherwise.
func (o *ObjectOfObjectsAndArrays) GetArrayOfPrimitives() ArrayOfPrimitives {
	if o == nil || IsNil(o.ArrayOfPrimitives) {
		var ret ArrayOfPrimitives
		return ret
	}
	return *o.ArrayOfPrimitives
}

// GetArrayOfPrimitivesOk returns a tuple with the ArrayOfPrimitives field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectOfObjectsAndArrays) GetArrayOfPrimitivesOk() (*ArrayOfPrimitives, bool) {
	if o == nil || IsNil(o.ArrayOfPrimitives) {
		return nil, false
	}
	return o.ArrayOfPrimitives, true
}

// HasArrayOfPrimitives returns a boolean if a field has been set.
func (o *ObjectOfObjectsAndArrays) HasArrayOfPrimitives() bool {
	if o != nil && !IsNil(o.ArrayOfPrimitives) {
		return true
	}

	return false
}

// SetArrayOfPrimitives gets a reference to the given ArrayOfPrimitives and assigns it to the ArrayOfPrimitives field.
func (o *ObjectOfObjectsAndArrays) SetArrayOfPrimitives(v ArrayOfPrimitives) {
	o.ArrayOfPrimitives = &v
}

// GetArrayOfObjects returns the ArrayOfObjects field value if set, zero value otherwise.
func (o *ObjectOfObjectsAndArrays) GetArrayOfObjects() ArrayOfFlatObjects {
	if o == nil || IsNil(o.ArrayOfObjects) {
		var ret ArrayOfFlatObjects
		return ret
	}
	return *o.ArrayOfObjects
}

// GetArrayOfObjectsOk returns a tuple with the ArrayOfObjects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectOfObjectsAndArrays) GetArrayOfObjectsOk() (*ArrayOfFlatObjects, bool) {
	if o == nil || IsNil(o.ArrayOfObjects) {
		return nil, false
	}
	return o.ArrayOfObjects, true
}

// HasArrayOfObjects returns a boolean if a field has been set.
func (o *ObjectOfObjectsAndArrays) HasArrayOfObjects() bool {
	if o != nil && !IsNil(o.ArrayOfObjects) {
		return true
	}

	return false
}

// SetArrayOfObjects gets a reference to the given ArrayOfFlatObjects and assigns it to the ArrayOfObjects field.
func (o *ObjectOfObjectsAndArrays) SetArrayOfObjects(v ArrayOfFlatObjects) {
	o.ArrayOfObjects = &v
}

// GetPrimitive returns the Primitive field value if set, zero value otherwise.
func (o *ObjectOfObjectsAndArrays) GetPrimitive() string {
	if o == nil || IsNil(o.Primitive) {
		var ret string
		return ret
	}
	return *o.Primitive
}

// GetPrimitiveOk returns a tuple with the Primitive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectOfObjectsAndArrays) GetPrimitiveOk() (*string, bool) {
	if o == nil || IsNil(o.Primitive) {
		return nil, false
	}
	return o.Primitive, true
}

// HasPrimitive returns a boolean if a field has been set.
func (o *ObjectOfObjectsAndArrays) HasPrimitive() bool {
	if o != nil && !IsNil(o.Primitive) {
		return true
	}

	return false
}

// SetPrimitive gets a reference to the given string and assigns it to the Primitive field.
func (o *ObjectOfObjectsAndArrays) SetPrimitive(v string) {
	o.Primitive = &v
}

func (o ObjectOfObjectsAndArrays) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ObjectOfObjectsAndArrays) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SingleObject) {
		toSerialize["singleObject"] = o.SingleObject
	}
	if !IsNil(o.ArrayOfPrimitives) {
		toSerialize["arrayOfPrimitives"] = o.ArrayOfPrimitives
	}
	if !IsNil(o.ArrayOfObjects) {
		toSerialize["arrayOfObjects"] = o.ArrayOfObjects
	}
	if !IsNil(o.Primitive) {
		toSerialize["primitive"] = o.Primitive
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ObjectOfObjectsAndArrays) UnmarshalJSON(data []byte) (err error) {
	varObjectOfObjectsAndArrays := _ObjectOfObjectsAndArrays{}

	err = json.Unmarshal(data, &varObjectOfObjectsAndArrays)

	if err != nil {
		return err
	}

	*o = ObjectOfObjectsAndArrays(varObjectOfObjectsAndArrays)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "singleObject")
		delete(additionalProperties, "arrayOfPrimitives")
		delete(additionalProperties, "arrayOfObjects")
		delete(additionalProperties, "primitive")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableObjectOfObjectsAndArrays struct {
	value *ObjectOfObjectsAndArrays
	isSet bool
}

func (v NullableObjectOfObjectsAndArrays) Get() *ObjectOfObjectsAndArrays {
	return v.value
}

func (v *NullableObjectOfObjectsAndArrays) Set(val *ObjectOfObjectsAndArrays) {
	v.value = val
	v.isSet = true
}

func (v NullableObjectOfObjectsAndArrays) IsSet() bool {
	return v.isSet
}

func (v *NullableObjectOfObjectsAndArrays) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObjectOfObjectsAndArrays(val *ObjectOfObjectsAndArrays) *NullableObjectOfObjectsAndArrays {
	return &NullableObjectOfObjectsAndArrays{value: val, isSet: true}
}

func (v NullableObjectOfObjectsAndArrays) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObjectOfObjectsAndArrays) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


