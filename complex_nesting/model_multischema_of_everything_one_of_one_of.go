/*
Responses with various schema formats

https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.3.md#schema-object

API version: 1.0
Contact: a-team@goarmy.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package complex_nesting

import (
	"encoding/json"
)

// checks if the MultischemaOfEverythingOneOfOneOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MultischemaOfEverythingOneOfOneOf{}

// MultischemaOfEverythingOneOfOneOf struct for MultischemaOfEverythingOneOfOneOf
type MultischemaOfEverythingOneOfOneOf struct {
	ObjEverything *ObjectOfEverything `json:"objEverything,omitempty"`
	FlatObj *FlatObject `json:"flatObj,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _MultischemaOfEverythingOneOfOneOf MultischemaOfEverythingOneOfOneOf

// NewMultischemaOfEverythingOneOfOneOf instantiates a new MultischemaOfEverythingOneOfOneOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMultischemaOfEverythingOneOfOneOf() *MultischemaOfEverythingOneOfOneOf {
	this := MultischemaOfEverythingOneOfOneOf{}
	return &this
}

// NewMultischemaOfEverythingOneOfOneOfWithDefaults instantiates a new MultischemaOfEverythingOneOfOneOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMultischemaOfEverythingOneOfOneOfWithDefaults() *MultischemaOfEverythingOneOfOneOf {
	this := MultischemaOfEverythingOneOfOneOf{}
	return &this
}

// GetObjEverything returns the ObjEverything field value if set, zero value otherwise.
func (o *MultischemaOfEverythingOneOfOneOf) GetObjEverything() ObjectOfEverything {
	if o == nil || IsNil(o.ObjEverything) {
		var ret ObjectOfEverything
		return ret
	}
	return *o.ObjEverything
}

// GetObjEverythingOk returns a tuple with the ObjEverything field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultischemaOfEverythingOneOfOneOf) GetObjEverythingOk() (*ObjectOfEverything, bool) {
	if o == nil || IsNil(o.ObjEverything) {
		return nil, false
	}
	return o.ObjEverything, true
}

// HasObjEverything returns a boolean if a field has been set.
func (o *MultischemaOfEverythingOneOfOneOf) HasObjEverything() bool {
	if o != nil && !IsNil(o.ObjEverything) {
		return true
	}

	return false
}

// SetObjEverything gets a reference to the given ObjectOfEverything and assigns it to the ObjEverything field.
func (o *MultischemaOfEverythingOneOfOneOf) SetObjEverything(v ObjectOfEverything) {
	o.ObjEverything = &v
}

// GetFlatObj returns the FlatObj field value if set, zero value otherwise.
func (o *MultischemaOfEverythingOneOfOneOf) GetFlatObj() FlatObject {
	if o == nil || IsNil(o.FlatObj) {
		var ret FlatObject
		return ret
	}
	return *o.FlatObj
}

// GetFlatObjOk returns a tuple with the FlatObj field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultischemaOfEverythingOneOfOneOf) GetFlatObjOk() (*FlatObject, bool) {
	if o == nil || IsNil(o.FlatObj) {
		return nil, false
	}
	return o.FlatObj, true
}

// HasFlatObj returns a boolean if a field has been set.
func (o *MultischemaOfEverythingOneOfOneOf) HasFlatObj() bool {
	if o != nil && !IsNil(o.FlatObj) {
		return true
	}

	return false
}

// SetFlatObj gets a reference to the given FlatObject and assigns it to the FlatObj field.
func (o *MultischemaOfEverythingOneOfOneOf) SetFlatObj(v FlatObject) {
	o.FlatObj = &v
}

func (o MultischemaOfEverythingOneOfOneOf) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MultischemaOfEverythingOneOfOneOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ObjEverything) {
		toSerialize["objEverything"] = o.ObjEverything
	}
	if !IsNil(o.FlatObj) {
		toSerialize["flatObj"] = o.FlatObj
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MultischemaOfEverythingOneOfOneOf) UnmarshalJSON(data []byte) (err error) {
	varMultischemaOfEverythingOneOfOneOf := _MultischemaOfEverythingOneOfOneOf{}

	err = json.Unmarshal(data, &varMultischemaOfEverythingOneOfOneOf)

	if err != nil {
		return err
	}

	*o = MultischemaOfEverythingOneOfOneOf(varMultischemaOfEverythingOneOfOneOf)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "objEverything")
		delete(additionalProperties, "flatObj")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMultischemaOfEverythingOneOfOneOf struct {
	value *MultischemaOfEverythingOneOfOneOf
	isSet bool
}

func (v NullableMultischemaOfEverythingOneOfOneOf) Get() *MultischemaOfEverythingOneOfOneOf {
	return v.value
}

func (v *NullableMultischemaOfEverythingOneOfOneOf) Set(val *MultischemaOfEverythingOneOfOneOf) {
	v.value = val
	v.isSet = true
}

func (v NullableMultischemaOfEverythingOneOfOneOf) IsSet() bool {
	return v.isSet
}

func (v *NullableMultischemaOfEverythingOneOfOneOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMultischemaOfEverythingOneOfOneOf(val *MultischemaOfEverythingOneOfOneOf) *NullableMultischemaOfEverythingOneOfOneOf {
	return &NullableMultischemaOfEverythingOneOfOneOf{value: val, isSet: true}
}

func (v NullableMultischemaOfEverythingOneOfOneOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMultischemaOfEverythingOneOfOneOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


