/*
Responses with various schema formats

https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.3.md#schema-object

API version: 1.0
Contact: a-team@goarmy.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package complex_nesting

import (
	"encoding/json"
	"fmt"
)

// ObjectOfAdditionalPropertiesObjectPolymorphismValueMetadata - struct for ObjectOfAdditionalPropertiesObjectPolymorphismValueMetadata
type ObjectOfAdditionalPropertiesObjectPolymorphismValueMetadata struct {
	FlatObject *FlatObject
	ObjectWithArray *ObjectWithArray
	MapmapOfStringAny *map[string]interface{}
}

// FlatObjectAsObjectOfAdditionalPropertiesObjectPolymorphismValueMetadata is a convenience function that returns FlatObject wrapped in ObjectOfAdditionalPropertiesObjectPolymorphismValueMetadata
func FlatObjectAsObjectOfAdditionalPropertiesObjectPolymorphismValueMetadata(v *FlatObject) ObjectOfAdditionalPropertiesObjectPolymorphismValueMetadata {
	return ObjectOfAdditionalPropertiesObjectPolymorphismValueMetadata{
		FlatObject: v,
	}
}

// ObjectWithArrayAsObjectOfAdditionalPropertiesObjectPolymorphismValueMetadata is a convenience function that returns ObjectWithArray wrapped in ObjectOfAdditionalPropertiesObjectPolymorphismValueMetadata
func ObjectWithArrayAsObjectOfAdditionalPropertiesObjectPolymorphismValueMetadata(v *ObjectWithArray) ObjectOfAdditionalPropertiesObjectPolymorphismValueMetadata {
	return ObjectOfAdditionalPropertiesObjectPolymorphismValueMetadata{
		ObjectWithArray: v,
	}
}

// map[string]interface{}AsObjectOfAdditionalPropertiesObjectPolymorphismValueMetadata is a convenience function that returns map[string]interface{} wrapped in ObjectOfAdditionalPropertiesObjectPolymorphismValueMetadata
func MapmapOfStringAnyAsObjectOfAdditionalPropertiesObjectPolymorphismValueMetadata(v *map[string]interface{}) ObjectOfAdditionalPropertiesObjectPolymorphismValueMetadata {
	return ObjectOfAdditionalPropertiesObjectPolymorphismValueMetadata{
		MapmapOfStringAny: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ObjectOfAdditionalPropertiesObjectPolymorphismValueMetadata) UnmarshalJSON(data []byte) error {
	var err error
	// this object is nullable so check if the payload is null or empty string
	if string(data) == "" || string(data) == "{}" {
		return nil
	}

	match := 0
	// try to unmarshal data into FlatObject
	err = newStrictDecoder(data).Decode(&dst.FlatObject)
	if err == nil {
		jsonFlatObject, _ := json.Marshal(dst.FlatObject)
		if string(jsonFlatObject) == "{}" { // empty struct
			dst.FlatObject = nil
		} else {
			match++
		}
	} else {
		dst.FlatObject = nil
	}

	// try to unmarshal data into ObjectWithArray
	err = newStrictDecoder(data).Decode(&dst.ObjectWithArray)
	if err == nil {
		jsonObjectWithArray, _ := json.Marshal(dst.ObjectWithArray)
		if string(jsonObjectWithArray) == "{}" { // empty struct
			dst.ObjectWithArray = nil
		} else {
			match++
		}
	} else {
		dst.ObjectWithArray = nil
	}

	// try to unmarshal data into MapmapOfStringAny
	err = newStrictDecoder(data).Decode(&dst.MapmapOfStringAny)
	if err == nil {
		jsonMapmapOfStringAny, _ := json.Marshal(dst.MapmapOfStringAny)
		if string(jsonMapmapOfStringAny) == "{}" { // empty struct
			dst.MapmapOfStringAny = nil
		} else {
			match++
		}
	} else {
		dst.MapmapOfStringAny = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.FlatObject = nil
		dst.ObjectWithArray = nil
		dst.MapmapOfStringAny = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ObjectOfAdditionalPropertiesObjectPolymorphismValueMetadata)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ObjectOfAdditionalPropertiesObjectPolymorphismValueMetadata)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ObjectOfAdditionalPropertiesObjectPolymorphismValueMetadata) MarshalJSON() ([]byte, error) {
	if src.FlatObject != nil {
		return json.Marshal(&src.FlatObject)
	}

	if src.ObjectWithArray != nil {
		return json.Marshal(&src.ObjectWithArray)
	}

	if src.MapmapOfStringAny != nil {
		return json.Marshal(&src.MapmapOfStringAny)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ObjectOfAdditionalPropertiesObjectPolymorphismValueMetadata) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.FlatObject != nil {
		return obj.FlatObject
	}

	if obj.ObjectWithArray != nil {
		return obj.ObjectWithArray
	}

	if obj.MapmapOfStringAny != nil {
		return obj.MapmapOfStringAny
	}

	// all schemas are nil
	return nil
}

type NullableObjectOfAdditionalPropertiesObjectPolymorphismValueMetadata struct {
	value *ObjectOfAdditionalPropertiesObjectPolymorphismValueMetadata
	isSet bool
}

func (v NullableObjectOfAdditionalPropertiesObjectPolymorphismValueMetadata) Get() *ObjectOfAdditionalPropertiesObjectPolymorphismValueMetadata {
	return v.value
}

func (v *NullableObjectOfAdditionalPropertiesObjectPolymorphismValueMetadata) Set(val *ObjectOfAdditionalPropertiesObjectPolymorphismValueMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableObjectOfAdditionalPropertiesObjectPolymorphismValueMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableObjectOfAdditionalPropertiesObjectPolymorphismValueMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObjectOfAdditionalPropertiesObjectPolymorphismValueMetadata(val *ObjectOfAdditionalPropertiesObjectPolymorphismValueMetadata) *NullableObjectOfAdditionalPropertiesObjectPolymorphismValueMetadata {
	return &NullableObjectOfAdditionalPropertiesObjectPolymorphismValueMetadata{value: val, isSet: true}
}

func (v NullableObjectOfAdditionalPropertiesObjectPolymorphismValueMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObjectOfAdditionalPropertiesObjectPolymorphismValueMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


