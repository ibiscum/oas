/*
Responses with various schema formats

https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.3.md#schema-object

API version: 1.0
Contact: a-team@goarmy.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package complex_nesting

import (
	"encoding/json"
	"fmt"
)

// MultischemaOfEverythingOneOf - struct for MultischemaOfEverythingOneOf
type MultischemaOfEverythingOneOf struct {
	ArrayOfObjectsOfObjectsAndArrays *ArrayOfObjectsOfObjectsAndArrays
	MultischemaOfEverythingOneOfOneOf *MultischemaOfEverythingOneOfOneOf
}

// ArrayOfObjectsOfObjectsAndArraysAsMultischemaOfEverythingOneOf is a convenience function that returns ArrayOfObjectsOfObjectsAndArrays wrapped in MultischemaOfEverythingOneOf
func ArrayOfObjectsOfObjectsAndArraysAsMultischemaOfEverythingOneOf(v *ArrayOfObjectsOfObjectsAndArrays) MultischemaOfEverythingOneOf {
	return MultischemaOfEverythingOneOf{
		ArrayOfObjectsOfObjectsAndArrays: v,
	}
}

// MultischemaOfEverythingOneOfOneOfAsMultischemaOfEverythingOneOf is a convenience function that returns MultischemaOfEverythingOneOfOneOf wrapped in MultischemaOfEverythingOneOf
func MultischemaOfEverythingOneOfOneOfAsMultischemaOfEverythingOneOf(v *MultischemaOfEverythingOneOfOneOf) MultischemaOfEverythingOneOf {
	return MultischemaOfEverythingOneOf{
		MultischemaOfEverythingOneOfOneOf: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *MultischemaOfEverythingOneOf) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ArrayOfObjectsOfObjectsAndArrays
	err = newStrictDecoder(data).Decode(&dst.ArrayOfObjectsOfObjectsAndArrays)
	if err == nil {
		jsonArrayOfObjectsOfObjectsAndArrays, _ := json.Marshal(dst.ArrayOfObjectsOfObjectsAndArrays)
		if string(jsonArrayOfObjectsOfObjectsAndArrays) == "{}" { // empty struct
			dst.ArrayOfObjectsOfObjectsAndArrays = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfObjectsOfObjectsAndArrays = nil
	}

	// try to unmarshal data into MultischemaOfEverythingOneOfOneOf
	err = newStrictDecoder(data).Decode(&dst.MultischemaOfEverythingOneOfOneOf)
	if err == nil {
		jsonMultischemaOfEverythingOneOfOneOf, _ := json.Marshal(dst.MultischemaOfEverythingOneOfOneOf)
		if string(jsonMultischemaOfEverythingOneOfOneOf) == "{}" { // empty struct
			dst.MultischemaOfEverythingOneOfOneOf = nil
		} else {
			match++
		}
	} else {
		dst.MultischemaOfEverythingOneOfOneOf = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ArrayOfObjectsOfObjectsAndArrays = nil
		dst.MultischemaOfEverythingOneOfOneOf = nil

		return fmt.Errorf("data matches more than one schema in oneOf(MultischemaOfEverythingOneOf)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(MultischemaOfEverythingOneOf)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src MultischemaOfEverythingOneOf) MarshalJSON() ([]byte, error) {
	if src.ArrayOfObjectsOfObjectsAndArrays != nil {
		return json.Marshal(&src.ArrayOfObjectsOfObjectsAndArrays)
	}

	if src.MultischemaOfEverythingOneOfOneOf != nil {
		return json.Marshal(&src.MultischemaOfEverythingOneOfOneOf)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *MultischemaOfEverythingOneOf) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ArrayOfObjectsOfObjectsAndArrays != nil {
		return obj.ArrayOfObjectsOfObjectsAndArrays
	}

	if obj.MultischemaOfEverythingOneOfOneOf != nil {
		return obj.MultischemaOfEverythingOneOfOneOf
	}

	// all schemas are nil
	return nil
}

type NullableMultischemaOfEverythingOneOf struct {
	value *MultischemaOfEverythingOneOf
	isSet bool
}

func (v NullableMultischemaOfEverythingOneOf) Get() *MultischemaOfEverythingOneOf {
	return v.value
}

func (v *NullableMultischemaOfEverythingOneOf) Set(val *MultischemaOfEverythingOneOf) {
	v.value = val
	v.isSet = true
}

func (v NullableMultischemaOfEverythingOneOf) IsSet() bool {
	return v.isSet
}

func (v *NullableMultischemaOfEverythingOneOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMultischemaOfEverythingOneOf(val *MultischemaOfEverythingOneOf) *NullableMultischemaOfEverythingOneOf {
	return &NullableMultischemaOfEverythingOneOf{value: val, isSet: true}
}

func (v NullableMultischemaOfEverythingOneOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMultischemaOfEverythingOneOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


