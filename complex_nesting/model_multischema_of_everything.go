/*
Responses with various schema formats

https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.3.md#schema-object

API version: 1.0
Contact: a-team@goarmy.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package complex_nesting

import (
	"encoding/json"
	"fmt"
)

// MultischemaOfEverything - struct for MultischemaOfEverything
type MultischemaOfEverything struct {
	ArrayOfFlatObjects *ArrayOfFlatObjects
	ArrayOfPrimitives *ArrayOfPrimitives
	FlatObject *FlatObject
	MultischemaOfEverythingOneOf *MultischemaOfEverythingOneOf
	ObjectOfEverything *ObjectOfEverything
}

// ArrayOfFlatObjectsAsMultischemaOfEverything is a convenience function that returns ArrayOfFlatObjects wrapped in MultischemaOfEverything
func ArrayOfFlatObjectsAsMultischemaOfEverything(v *ArrayOfFlatObjects) MultischemaOfEverything {
	return MultischemaOfEverything{
		ArrayOfFlatObjects: v,
	}
}

// ArrayOfPrimitivesAsMultischemaOfEverything is a convenience function that returns ArrayOfPrimitives wrapped in MultischemaOfEverything
func ArrayOfPrimitivesAsMultischemaOfEverything(v *ArrayOfPrimitives) MultischemaOfEverything {
	return MultischemaOfEverything{
		ArrayOfPrimitives: v,
	}
}

// FlatObjectAsMultischemaOfEverything is a convenience function that returns FlatObject wrapped in MultischemaOfEverything
func FlatObjectAsMultischemaOfEverything(v *FlatObject) MultischemaOfEverything {
	return MultischemaOfEverything{
		FlatObject: v,
	}
}

// MultischemaOfEverythingOneOfAsMultischemaOfEverything is a convenience function that returns MultischemaOfEverythingOneOf wrapped in MultischemaOfEverything
func MultischemaOfEverythingOneOfAsMultischemaOfEverything(v *MultischemaOfEverythingOneOf) MultischemaOfEverything {
	return MultischemaOfEverything{
		MultischemaOfEverythingOneOf: v,
	}
}

// ObjectOfEverythingAsMultischemaOfEverything is a convenience function that returns ObjectOfEverything wrapped in MultischemaOfEverything
func ObjectOfEverythingAsMultischemaOfEverything(v *ObjectOfEverything) MultischemaOfEverything {
	return MultischemaOfEverything{
		ObjectOfEverything: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *MultischemaOfEverything) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ArrayOfFlatObjects
	err = newStrictDecoder(data).Decode(&dst.ArrayOfFlatObjects)
	if err == nil {
		jsonArrayOfFlatObjects, _ := json.Marshal(dst.ArrayOfFlatObjects)
		if string(jsonArrayOfFlatObjects) == "{}" { // empty struct
			dst.ArrayOfFlatObjects = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfFlatObjects = nil
	}

	// try to unmarshal data into ArrayOfPrimitives
	err = newStrictDecoder(data).Decode(&dst.ArrayOfPrimitives)
	if err == nil {
		jsonArrayOfPrimitives, _ := json.Marshal(dst.ArrayOfPrimitives)
		if string(jsonArrayOfPrimitives) == "{}" { // empty struct
			dst.ArrayOfPrimitives = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfPrimitives = nil
	}

	// try to unmarshal data into FlatObject
	err = newStrictDecoder(data).Decode(&dst.FlatObject)
	if err == nil {
		jsonFlatObject, _ := json.Marshal(dst.FlatObject)
		if string(jsonFlatObject) == "{}" { // empty struct
			dst.FlatObject = nil
		} else {
			match++
		}
	} else {
		dst.FlatObject = nil
	}

	// try to unmarshal data into MultischemaOfEverythingOneOf
	err = newStrictDecoder(data).Decode(&dst.MultischemaOfEverythingOneOf)
	if err == nil {
		jsonMultischemaOfEverythingOneOf, _ := json.Marshal(dst.MultischemaOfEverythingOneOf)
		if string(jsonMultischemaOfEverythingOneOf) == "{}" { // empty struct
			dst.MultischemaOfEverythingOneOf = nil
		} else {
			match++
		}
	} else {
		dst.MultischemaOfEverythingOneOf = nil
	}

	// try to unmarshal data into ObjectOfEverything
	err = newStrictDecoder(data).Decode(&dst.ObjectOfEverything)
	if err == nil {
		jsonObjectOfEverything, _ := json.Marshal(dst.ObjectOfEverything)
		if string(jsonObjectOfEverything) == "{}" { // empty struct
			dst.ObjectOfEverything = nil
		} else {
			match++
		}
	} else {
		dst.ObjectOfEverything = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ArrayOfFlatObjects = nil
		dst.ArrayOfPrimitives = nil
		dst.FlatObject = nil
		dst.MultischemaOfEverythingOneOf = nil
		dst.ObjectOfEverything = nil

		return fmt.Errorf("data matches more than one schema in oneOf(MultischemaOfEverything)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(MultischemaOfEverything)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src MultischemaOfEverything) MarshalJSON() ([]byte, error) {
	if src.ArrayOfFlatObjects != nil {
		return json.Marshal(&src.ArrayOfFlatObjects)
	}

	if src.ArrayOfPrimitives != nil {
		return json.Marshal(&src.ArrayOfPrimitives)
	}

	if src.FlatObject != nil {
		return json.Marshal(&src.FlatObject)
	}

	if src.MultischemaOfEverythingOneOf != nil {
		return json.Marshal(&src.MultischemaOfEverythingOneOf)
	}

	if src.ObjectOfEverything != nil {
		return json.Marshal(&src.ObjectOfEverything)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *MultischemaOfEverything) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ArrayOfFlatObjects != nil {
		return obj.ArrayOfFlatObjects
	}

	if obj.ArrayOfPrimitives != nil {
		return obj.ArrayOfPrimitives
	}

	if obj.FlatObject != nil {
		return obj.FlatObject
	}

	if obj.MultischemaOfEverythingOneOf != nil {
		return obj.MultischemaOfEverythingOneOf
	}

	if obj.ObjectOfEverything != nil {
		return obj.ObjectOfEverything
	}

	// all schemas are nil
	return nil
}

type NullableMultischemaOfEverything struct {
	value *MultischemaOfEverything
	isSet bool
}

func (v NullableMultischemaOfEverything) Get() *MultischemaOfEverything {
	return v.value
}

func (v *NullableMultischemaOfEverything) Set(val *MultischemaOfEverything) {
	v.value = val
	v.isSet = true
}

func (v NullableMultischemaOfEverything) IsSet() bool {
	return v.isSet
}

func (v *NullableMultischemaOfEverything) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMultischemaOfEverything(val *MultischemaOfEverything) *NullableMultischemaOfEverything {
	return &NullableMultischemaOfEverything{value: val, isSet: true}
}

func (v NullableMultischemaOfEverything) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMultischemaOfEverything) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


