/*
Callback Example

API definition with callback

API version: 1.0.0
Contact: a-team@goarmy.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package callbacks

import (
	"encoding/json"
)

// checks if the StreamsPost202Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StreamsPost202Response{}

// StreamsPost202Response struct for StreamsPost202Response
type StreamsPost202Response struct {
	User *StreamsPost202ResponseUser `json:"User,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _StreamsPost202Response StreamsPost202Response

// NewStreamsPost202Response instantiates a new StreamsPost202Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStreamsPost202Response() *StreamsPost202Response {
	this := StreamsPost202Response{}
	return &this
}

// NewStreamsPost202ResponseWithDefaults instantiates a new StreamsPost202Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStreamsPost202ResponseWithDefaults() *StreamsPost202Response {
	this := StreamsPost202Response{}
	return &this
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *StreamsPost202Response) GetUser() StreamsPost202ResponseUser {
	if o == nil || IsNil(o.User) {
		var ret StreamsPost202ResponseUser
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamsPost202Response) GetUserOk() (*StreamsPost202ResponseUser, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *StreamsPost202Response) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given StreamsPost202ResponseUser and assigns it to the User field.
func (o *StreamsPost202Response) SetUser(v StreamsPost202ResponseUser) {
	o.User = &v
}

func (o StreamsPost202Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StreamsPost202Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.User) {
		toSerialize["User"] = o.User
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *StreamsPost202Response) UnmarshalJSON(data []byte) (err error) {
	varStreamsPost202Response := _StreamsPost202Response{}

	err = json.Unmarshal(data, &varStreamsPost202Response)

	if err != nil {
		return err
	}

	*o = StreamsPost202Response(varStreamsPost202Response)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "User")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableStreamsPost202Response struct {
	value *StreamsPost202Response
	isSet bool
}

func (v NullableStreamsPost202Response) Get() *StreamsPost202Response {
	return v.value
}

func (v *NullableStreamsPost202Response) Set(val *StreamsPost202Response) {
	v.value = val
	v.isSet = true
}

func (v NullableStreamsPost202Response) IsSet() bool {
	return v.isSet
}

func (v *NullableStreamsPost202Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStreamsPost202Response(val *StreamsPost202Response) *NullableStreamsPost202Response {
	return &NullableStreamsPost202Response{value: val, isSet: true}
}

func (v NullableStreamsPost202Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStreamsPost202Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


