// Package discriminators provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package discriminators

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/labstack/echo/v4"
)

// Defines values for BaseBuyerWebhookEventEventType.
const (
	BaseBuyerWebhookEventEventTypeApplicationApproved BaseBuyerWebhookEventEventType = "application_approved"
	BaseBuyerWebhookEventEventTypeApplicationDenied   BaseBuyerWebhookEventEventType = "application_denied"
)

// Defines values for BasePurchaseWebhookEventEventType.
const (
	BasePurchaseWebhookEventEventTypeApplicationApproved BasePurchaseWebhookEventEventType = "application_approved"
	BasePurchaseWebhookEventEventTypeApplicationDenied   BasePurchaseWebhookEventEventType = "application_denied"
)

// Defines values for BaseWebhookEventEventType.
const (
	ApplicationApproved BaseWebhookEventEventType = "application_approved"
	ApplicationDenied   BaseWebhookEventEventType = "application_denied"
)

// Defines values for DogBreed.
const (
	DogBreedDingo     DogBreed = "Dingo"
	DogBreedHusky     DogBreed = "Husky"
	DogBreedRetriever DogBreed = "Retriever"
	DogBreedShepherd  DogBreed = "Shepherd"
)

// Defines values for DogNoDiscBreed.
const (
	DogNoDiscBreedDingo     DogNoDiscBreed = "Dingo"
	DogNoDiscBreedHusky     DogNoDiscBreed = "Husky"
	DogNoDiscBreedRetriever DogNoDiscBreed = "Retriever"
	DogNoDiscBreedShepherd  DogNoDiscBreed = "Shepherd"
)

// Defines values for OneOfWithImproperlyPlacedDiscriminatorJSONBodyConnectorType.
const (
	OneOfWithImproperlyPlacedDiscriminatorJSONBodyConnectorTypeGcsImport OneOfWithImproperlyPlacedDiscriminatorJSONBodyConnectorType = "gcsImport"
	OneOfWithImproperlyPlacedDiscriminatorJSONBodyConnectorTypeS3Import  OneOfWithImproperlyPlacedDiscriminatorJSONBodyConnectorType = "s3Import"
)

// Defines values for MappingWithDuplicateSchemasJSONBodyDiscrimValue.
const (
	OneA  MappingWithDuplicateSchemasJSONBodyDiscrimValue = "oneA"
	OneB  MappingWithDuplicateSchemasJSONBodyDiscrimValue = "oneB"
	OneC  MappingWithDuplicateSchemasJSONBodyDiscrimValue = "oneC"
	Three MappingWithDuplicateSchemasJSONBodyDiscrimValue = "three"
	TwoA  MappingWithDuplicateSchemasJSONBodyDiscrimValue = "twoA"
	TwoB  MappingWithDuplicateSchemasJSONBodyDiscrimValue = "twoB"
)

// ApplicationApprovedEvent defines model for ApplicationApprovedEvent.
type ApplicationApprovedEvent = BasePurchaseWebhookEvent

// ApplicationDeniedEvent defines model for ApplicationDeniedEvent.
type ApplicationDeniedEvent = BasePurchaseWebhookEvent

// BaseBuyerWebhookEvent defines model for BaseBuyerWebhookEvent.
type BaseBuyerWebhookEvent struct {
	// BuyerId ID of the buyer the event corresponds to.
	BuyerId string `json:"buyer_id"`

	// EventId ID of the event.
	EventId string `json:"event_id"`

	// EventType Type of the webhook event.
	EventType BaseBuyerWebhookEventEventType `json:"event_type"`
}

// BaseBuyerWebhookEventEventType Type of the webhook event.
type BaseBuyerWebhookEventEventType string

// BasePurchaseWebhookEvent defines model for BasePurchaseWebhookEvent.
type BasePurchaseWebhookEvent struct {
	// BuyerId ID of the buyer the event corresponds to.
	BuyerId string `json:"buyer_id"`

	// EventId ID of the event.
	EventId string `json:"event_id"`

	// EventType Type of the webhook event.
	EventType BasePurchaseWebhookEventEventType `json:"event_type"`

	// OrderId Provided Partner Order ID.
	OrderId *string `json:"order_id,omitempty"`
}

// BasePurchaseWebhookEventEventType Type of the webhook event.
type BasePurchaseWebhookEventEventType string

// BaseWebhookEvent defines model for BaseWebhookEvent.
type BaseWebhookEvent struct {
	// EventId ID of the event.
	EventId string `json:"event_id"`

	// EventType Type of the webhook event.
	EventType BaseWebhookEventEventType `json:"event_type"`
}

// BaseWebhookEventEventType Type of the webhook event.
type BaseWebhookEventEventType string

// Cat defines model for Cat.
type Cat struct {
	Age     *int   `json:"age,omitempty"`
	Hunts   *bool  `json:"hunts,omitempty"`
	PetType string `json:"pet_type"`
}

// CatNoDisc defines model for CatNoDisc.
type CatNoDisc struct {
	Age     *int   `json:"age,omitempty"`
	Hunts   *bool  `json:"hunts,omitempty"`
	PetType string `json:"pet_type"`
}

// Dog defines model for Dog.
type Dog struct {
	Bark    *bool     `json:"bark,omitempty"`
	Breed   *DogBreed `json:"breed,omitempty"`
	PetType string    `json:"pet_type"`
}

// DogBreed defines model for Dog.Breed.
type DogBreed string

// DogNoDisc defines model for DogNoDisc.
type DogNoDisc struct {
	Bark    *bool           `json:"bark,omitempty"`
	Breed   *DogNoDiscBreed `json:"breed,omitempty"`
	PetType string          `json:"pet_type"`
}

// DogNoDiscBreed defines model for DogNoDisc.Breed.
type DogNoDiscBreed string

// OptionOneNoDisc defines model for OptionOneNoDisc.
type OptionOneNoDisc struct {
	Discrim   string   `json:"discrim"`
	Optionone *float32 `json:"optionone,omitempty"`
}

// OptionThreeNoDisc defines model for OptionThreeNoDisc.
type OptionThreeNoDisc struct {
	Discrim     string  `json:"discrim"`
	Optionthree *string `json:"optionthree,omitempty"`
}

// OptionTwoNoDisc defines model for OptionTwoNoDisc.
type OptionTwoNoDisc struct {
	Discrim   string  `json:"discrim"`
	Optiontwo *string `json:"optiontwo,omitempty"`
}

// Pet defines model for Pet.
type Pet struct {
	PetType string `json:"pet_type"`
}

// PetNoDisc defines model for PetNoDisc.
type PetNoDisc struct {
	PetType string `json:"pet_type"`
}

// GcsImport defines model for gcsImport.
type GcsImport struct {
	GcsBucket *string `json:"gcs_bucket,omitempty"`
	GcsPrefix *string `json:"gcs_prefix,omitempty"`
}

// Object1 defines model for object1.
type Object1 struct {
	A *string `json:"a,omitempty"`
	B *string `json:"b,omitempty"`
}

// Object2 defines model for object2.
type Object2 struct {
	C *string `json:"c,omitempty"`
	D *string `json:"d,omitempty"`
}

// S3Import defines model for s3Import.
type S3Import struct {
	S3Bucket *string `json:"s3_bucket,omitempty"`
	S3Prefix *string `json:"s3_prefix,omitempty"`
}

// OneOfWithTopLevelDiscriminatorAndMappingJSONBody defines parameters for OneOfWithTopLevelDiscriminatorAndMapping.
type OneOfWithTopLevelDiscriminatorAndMappingJSONBody struct {
	union json.RawMessage
}

// OneOfWithTopLevelDiscriminatorNoMappingJSONBody defines parameters for OneOfWithTopLevelDiscriminatorNoMapping.
type OneOfWithTopLevelDiscriminatorNoMappingJSONBody struct {
	union json.RawMessage
}

// EmbeddedDiscriminatorJSONBody defines parameters for EmbeddedDiscriminator.
type EmbeddedDiscriminatorJSONBody struct {
	union json.RawMessage
}

// OneOfWithImproperlyPlacedDiscriminatorJSONBody defines parameters for OneOfWithImproperlyPlacedDiscriminator.
type OneOfWithImproperlyPlacedDiscriminatorJSONBody struct {
	ConnectorProperties *OneOfWithImproperlyPlacedDiscriminatorJSONBody_ConnectorProperties `json:"connector_properties,omitempty"`
	ConnectorType       *OneOfWithImproperlyPlacedDiscriminatorJSONBodyConnectorType        `json:"connector_type,omitempty"`
}

// OneOfWithImproperlyPlacedDiscriminatorJSONBody_ConnectorProperties defines parameters for OneOfWithImproperlyPlacedDiscriminator.
type OneOfWithImproperlyPlacedDiscriminatorJSONBody_ConnectorProperties struct {
	union json.RawMessage
}

// OneOfWithImproperlyPlacedDiscriminatorJSONBodyConnectorType defines parameters for OneOfWithImproperlyPlacedDiscriminator.
type OneOfWithImproperlyPlacedDiscriminatorJSONBodyConnectorType string

// MappingOfSchemaNamesJSONBody defines parameters for MappingOfSchemaNames.
type MappingOfSchemaNamesJSONBody struct {
	union json.RawMessage
}

// MappingWithDuplicateSchemasJSONBody defines parameters for MappingWithDuplicateSchemas.
type MappingWithDuplicateSchemasJSONBody struct {
	DiscrimValue *MappingWithDuplicateSchemasJSONBodyDiscrimValue `json:"discrimValue,omitempty"`
	union        json.RawMessage
}

// MappingWithDuplicateSchemasJSONBodyDiscrimValue defines parameters for MappingWithDuplicateSchemas.
type MappingWithDuplicateSchemasJSONBodyDiscrimValue string

// NestedOneOfObjectWithNestedOneOfJSONBody defines parameters for NestedOneOfObjectWithNestedOneOf.
type NestedOneOfObjectWithNestedOneOfJSONBody struct {
	Config *NestedOneOfObjectWithNestedOneOfJSONBody_Config `json:"config,omitempty"`
}

// NestedOneOfObjectWithNestedOneOfJSONBodyConfig2 defines parameters for NestedOneOfObjectWithNestedOneOf.
type NestedOneOfObjectWithNestedOneOfJSONBodyConfig2 struct {
	union json.RawMessage
}

// NestedOneOfObjectWithNestedOneOfJSONBody_Config defines parameters for NestedOneOfObjectWithNestedOneOf.
type NestedOneOfObjectWithNestedOneOfJSONBody_Config struct {
	union json.RawMessage
}

// OneofAllofTopLevelDiscJSONBody defines parameters for OneofAllofTopLevelDisc.
type OneofAllofTopLevelDiscJSONBody struct {
	union json.RawMessage
}

// PotentiallyUndefinedFormDataJSONBody defines parameters for PotentiallyUndefinedFormData.
type PotentiallyUndefinedFormDataJSONBody struct {
	union json.RawMessage
}

// OneOfWithTopLevelDiscriminatorAndMappingJSONRequestBody defines body for OneOfWithTopLevelDiscriminatorAndMapping for application/json ContentType.
type OneOfWithTopLevelDiscriminatorAndMappingJSONRequestBody OneOfWithTopLevelDiscriminatorAndMappingJSONBody

// OneOfWithTopLevelDiscriminatorNoMappingJSONRequestBody defines body for OneOfWithTopLevelDiscriminatorNoMapping for application/json ContentType.
type OneOfWithTopLevelDiscriminatorNoMappingJSONRequestBody OneOfWithTopLevelDiscriminatorNoMappingJSONBody

// EmbeddedDiscriminatorJSONRequestBody defines body for EmbeddedDiscriminator for application/json ContentType.
type EmbeddedDiscriminatorJSONRequestBody EmbeddedDiscriminatorJSONBody

// OneOfWithImproperlyPlacedDiscriminatorJSONRequestBody defines body for OneOfWithImproperlyPlacedDiscriminator for application/json ContentType.
type OneOfWithImproperlyPlacedDiscriminatorJSONRequestBody OneOfWithImproperlyPlacedDiscriminatorJSONBody

// MappingOfSchemaNamesJSONRequestBody defines body for MappingOfSchemaNames for application/json ContentType.
type MappingOfSchemaNamesJSONRequestBody MappingOfSchemaNamesJSONBody

// MappingWithDuplicateSchemasJSONRequestBody defines body for MappingWithDuplicateSchemas for application/json ContentType.
type MappingWithDuplicateSchemasJSONRequestBody MappingWithDuplicateSchemasJSONBody

// NestedOneOfObjectWithNestedOneOfJSONRequestBody defines body for NestedOneOfObjectWithNestedOneOf for application/json ContentType.
type NestedOneOfObjectWithNestedOneOfJSONRequestBody NestedOneOfObjectWithNestedOneOfJSONBody

// OneofAllofTopLevelDiscJSONRequestBody defines body for OneofAllofTopLevelDisc for application/json ContentType.
type OneofAllofTopLevelDiscJSONRequestBody OneofAllofTopLevelDiscJSONBody

// PotentiallyUndefinedFormDataJSONRequestBody defines body for PotentiallyUndefinedFormData for application/json ContentType.
type PotentiallyUndefinedFormDataJSONRequestBody PotentiallyUndefinedFormDataJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// OneOfWithTopLevelDiscriminatorAndMappingWithBody request with any body
	OneOfWithTopLevelDiscriminatorAndMappingWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	OneOfWithTopLevelDiscriminatorAndMapping(ctx context.Context, body OneOfWithTopLevelDiscriminatorAndMappingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OneOfWithTopLevelDiscriminatorNoMappingWithBody request with any body
	OneOfWithTopLevelDiscriminatorNoMappingWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	OneOfWithTopLevelDiscriminatorNoMapping(ctx context.Context, body OneOfWithTopLevelDiscriminatorNoMappingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EmbeddedDiscriminatorWithBody request with any body
	EmbeddedDiscriminatorWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EmbeddedDiscriminator(ctx context.Context, body EmbeddedDiscriminatorJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OneOfWithImproperlyPlacedDiscriminatorWithBody request with any body
	OneOfWithImproperlyPlacedDiscriminatorWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	OneOfWithImproperlyPlacedDiscriminator(ctx context.Context, body OneOfWithImproperlyPlacedDiscriminatorJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MappingOfSchemaNamesWithBody request with any body
	MappingOfSchemaNamesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	MappingOfSchemaNames(ctx context.Context, body MappingOfSchemaNamesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MappingWithDuplicateSchemasWithBody request with any body
	MappingWithDuplicateSchemasWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	MappingWithDuplicateSchemas(ctx context.Context, body MappingWithDuplicateSchemasJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NestedOneOfObjectWithNestedOneOfWithBody request with any body
	NestedOneOfObjectWithNestedOneOfWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	NestedOneOfObjectWithNestedOneOf(ctx context.Context, body NestedOneOfObjectWithNestedOneOfJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OneofAllofTopLevelDiscWithBody request with any body
	OneofAllofTopLevelDiscWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	OneofAllofTopLevelDisc(ctx context.Context, body OneofAllofTopLevelDiscJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PotentiallyUndefinedFormDataWithBody request with any body
	PotentiallyUndefinedFormDataWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PotentiallyUndefinedFormData(ctx context.Context, body PotentiallyUndefinedFormDataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) OneOfWithTopLevelDiscriminatorAndMappingWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOneOfWithTopLevelDiscriminatorAndMappingRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OneOfWithTopLevelDiscriminatorAndMapping(ctx context.Context, body OneOfWithTopLevelDiscriminatorAndMappingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOneOfWithTopLevelDiscriminatorAndMappingRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OneOfWithTopLevelDiscriminatorNoMappingWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOneOfWithTopLevelDiscriminatorNoMappingRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OneOfWithTopLevelDiscriminatorNoMapping(ctx context.Context, body OneOfWithTopLevelDiscriminatorNoMappingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOneOfWithTopLevelDiscriminatorNoMappingRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EmbeddedDiscriminatorWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEmbeddedDiscriminatorRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EmbeddedDiscriminator(ctx context.Context, body EmbeddedDiscriminatorJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEmbeddedDiscriminatorRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OneOfWithImproperlyPlacedDiscriminatorWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOneOfWithImproperlyPlacedDiscriminatorRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OneOfWithImproperlyPlacedDiscriminator(ctx context.Context, body OneOfWithImproperlyPlacedDiscriminatorJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOneOfWithImproperlyPlacedDiscriminatorRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MappingOfSchemaNamesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMappingOfSchemaNamesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MappingOfSchemaNames(ctx context.Context, body MappingOfSchemaNamesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMappingOfSchemaNamesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MappingWithDuplicateSchemasWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMappingWithDuplicateSchemasRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MappingWithDuplicateSchemas(ctx context.Context, body MappingWithDuplicateSchemasJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMappingWithDuplicateSchemasRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NestedOneOfObjectWithNestedOneOfWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNestedOneOfObjectWithNestedOneOfRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NestedOneOfObjectWithNestedOneOf(ctx context.Context, body NestedOneOfObjectWithNestedOneOfJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNestedOneOfObjectWithNestedOneOfRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OneofAllofTopLevelDiscWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOneofAllofTopLevelDiscRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OneofAllofTopLevelDisc(ctx context.Context, body OneofAllofTopLevelDiscJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOneofAllofTopLevelDiscRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PotentiallyUndefinedFormDataWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPotentiallyUndefinedFormDataRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PotentiallyUndefinedFormData(ctx context.Context, body PotentiallyUndefinedFormDataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPotentiallyUndefinedFormDataRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewOneOfWithTopLevelDiscriminatorAndMappingRequest calls the generic OneOfWithTopLevelDiscriminatorAndMapping builder with application/json body
func NewOneOfWithTopLevelDiscriminatorAndMappingRequest(server string, body OneOfWithTopLevelDiscriminatorAndMappingJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewOneOfWithTopLevelDiscriminatorAndMappingRequestWithBody(server, "application/json", bodyReader)
}

// NewOneOfWithTopLevelDiscriminatorAndMappingRequestWithBody generates requests for OneOfWithTopLevelDiscriminatorAndMapping with any type of body
func NewOneOfWithTopLevelDiscriminatorAndMappingRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/discriminator-with-mapping")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewOneOfWithTopLevelDiscriminatorNoMappingRequest calls the generic OneOfWithTopLevelDiscriminatorNoMapping builder with application/json body
func NewOneOfWithTopLevelDiscriminatorNoMappingRequest(server string, body OneOfWithTopLevelDiscriminatorNoMappingJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewOneOfWithTopLevelDiscriminatorNoMappingRequestWithBody(server, "application/json", bodyReader)
}

// NewOneOfWithTopLevelDiscriminatorNoMappingRequestWithBody generates requests for OneOfWithTopLevelDiscriminatorNoMapping with any type of body
func NewOneOfWithTopLevelDiscriminatorNoMappingRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/discriminator-with-no-mapping")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEmbeddedDiscriminatorRequest calls the generic EmbeddedDiscriminator builder with application/json body
func NewEmbeddedDiscriminatorRequest(server string, body EmbeddedDiscriminatorJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEmbeddedDiscriminatorRequestWithBody(server, "application/json", bodyReader)
}

// NewEmbeddedDiscriminatorRequestWithBody generates requests for EmbeddedDiscriminator with any type of body
func NewEmbeddedDiscriminatorRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/embedded-discriminator")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewOneOfWithImproperlyPlacedDiscriminatorRequest calls the generic OneOfWithImproperlyPlacedDiscriminator builder with application/json body
func NewOneOfWithImproperlyPlacedDiscriminatorRequest(server string, body OneOfWithImproperlyPlacedDiscriminatorJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewOneOfWithImproperlyPlacedDiscriminatorRequestWithBody(server, "application/json", bodyReader)
}

// NewOneOfWithImproperlyPlacedDiscriminatorRequestWithBody generates requests for OneOfWithImproperlyPlacedDiscriminator with any type of body
func NewOneOfWithImproperlyPlacedDiscriminatorRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/improper-discriminator-placement")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewMappingOfSchemaNamesRequest calls the generic MappingOfSchemaNames builder with application/json body
func NewMappingOfSchemaNamesRequest(server string, body MappingOfSchemaNamesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewMappingOfSchemaNamesRequestWithBody(server, "application/json", bodyReader)
}

// NewMappingOfSchemaNamesRequestWithBody generates requests for MappingOfSchemaNames with any type of body
func NewMappingOfSchemaNamesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/mapping-of-schema-names")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewMappingWithDuplicateSchemasRequest calls the generic MappingWithDuplicateSchemas builder with application/json body
func NewMappingWithDuplicateSchemasRequest(server string, body MappingWithDuplicateSchemasJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewMappingWithDuplicateSchemasRequestWithBody(server, "application/json", bodyReader)
}

// NewMappingWithDuplicateSchemasRequestWithBody generates requests for MappingWithDuplicateSchemas with any type of body
func NewMappingWithDuplicateSchemasRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/mapping-with-duplicate-schemas")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewNestedOneOfObjectWithNestedOneOfRequest calls the generic NestedOneOfObjectWithNestedOneOf builder with application/json body
func NewNestedOneOfObjectWithNestedOneOfRequest(server string, body NestedOneOfObjectWithNestedOneOfJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewNestedOneOfObjectWithNestedOneOfRequestWithBody(server, "application/json", bodyReader)
}

// NewNestedOneOfObjectWithNestedOneOfRequestWithBody generates requests for NestedOneOfObjectWithNestedOneOf with any type of body
func NewNestedOneOfObjectWithNestedOneOfRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nested-one-of-object-with-nested-one-of")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewOneofAllofTopLevelDiscRequest calls the generic OneofAllofTopLevelDisc builder with application/json body
func NewOneofAllofTopLevelDiscRequest(server string, body OneofAllofTopLevelDiscJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewOneofAllofTopLevelDiscRequestWithBody(server, "application/json", bodyReader)
}

// NewOneofAllofTopLevelDiscRequestWithBody generates requests for OneofAllofTopLevelDisc with any type of body
func NewOneofAllofTopLevelDiscRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/oneof-allof-top-level-disc")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPotentiallyUndefinedFormDataRequest calls the generic PotentiallyUndefinedFormData builder with application/json body
func NewPotentiallyUndefinedFormDataRequest(server string, body PotentiallyUndefinedFormDataJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPotentiallyUndefinedFormDataRequestWithBody(server, "application/json", bodyReader)
}

// NewPotentiallyUndefinedFormDataRequestWithBody generates requests for PotentiallyUndefinedFormData with any type of body
func NewPotentiallyUndefinedFormDataRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/potentially-undefined-formData")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// OneOfWithTopLevelDiscriminatorAndMappingWithBodyWithResponse request with any body
	OneOfWithTopLevelDiscriminatorAndMappingWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OneOfWithTopLevelDiscriminatorAndMappingResponse, error)

	OneOfWithTopLevelDiscriminatorAndMappingWithResponse(ctx context.Context, body OneOfWithTopLevelDiscriminatorAndMappingJSONRequestBody, reqEditors ...RequestEditorFn) (*OneOfWithTopLevelDiscriminatorAndMappingResponse, error)

	// OneOfWithTopLevelDiscriminatorNoMappingWithBodyWithResponse request with any body
	OneOfWithTopLevelDiscriminatorNoMappingWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OneOfWithTopLevelDiscriminatorNoMappingResponse, error)

	OneOfWithTopLevelDiscriminatorNoMappingWithResponse(ctx context.Context, body OneOfWithTopLevelDiscriminatorNoMappingJSONRequestBody, reqEditors ...RequestEditorFn) (*OneOfWithTopLevelDiscriminatorNoMappingResponse, error)

	// EmbeddedDiscriminatorWithBodyWithResponse request with any body
	EmbeddedDiscriminatorWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EmbeddedDiscriminatorResponse, error)

	EmbeddedDiscriminatorWithResponse(ctx context.Context, body EmbeddedDiscriminatorJSONRequestBody, reqEditors ...RequestEditorFn) (*EmbeddedDiscriminatorResponse, error)

	// OneOfWithImproperlyPlacedDiscriminatorWithBodyWithResponse request with any body
	OneOfWithImproperlyPlacedDiscriminatorWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OneOfWithImproperlyPlacedDiscriminatorResponse, error)

	OneOfWithImproperlyPlacedDiscriminatorWithResponse(ctx context.Context, body OneOfWithImproperlyPlacedDiscriminatorJSONRequestBody, reqEditors ...RequestEditorFn) (*OneOfWithImproperlyPlacedDiscriminatorResponse, error)

	// MappingOfSchemaNamesWithBodyWithResponse request with any body
	MappingOfSchemaNamesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MappingOfSchemaNamesResponse, error)

	MappingOfSchemaNamesWithResponse(ctx context.Context, body MappingOfSchemaNamesJSONRequestBody, reqEditors ...RequestEditorFn) (*MappingOfSchemaNamesResponse, error)

	// MappingWithDuplicateSchemasWithBodyWithResponse request with any body
	MappingWithDuplicateSchemasWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MappingWithDuplicateSchemasResponse, error)

	MappingWithDuplicateSchemasWithResponse(ctx context.Context, body MappingWithDuplicateSchemasJSONRequestBody, reqEditors ...RequestEditorFn) (*MappingWithDuplicateSchemasResponse, error)

	// NestedOneOfObjectWithNestedOneOfWithBodyWithResponse request with any body
	NestedOneOfObjectWithNestedOneOfWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NestedOneOfObjectWithNestedOneOfResponse, error)

	NestedOneOfObjectWithNestedOneOfWithResponse(ctx context.Context, body NestedOneOfObjectWithNestedOneOfJSONRequestBody, reqEditors ...RequestEditorFn) (*NestedOneOfObjectWithNestedOneOfResponse, error)

	// OneofAllofTopLevelDiscWithBodyWithResponse request with any body
	OneofAllofTopLevelDiscWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OneofAllofTopLevelDiscResponse, error)

	OneofAllofTopLevelDiscWithResponse(ctx context.Context, body OneofAllofTopLevelDiscJSONRequestBody, reqEditors ...RequestEditorFn) (*OneofAllofTopLevelDiscResponse, error)

	// PotentiallyUndefinedFormDataWithBodyWithResponse request with any body
	PotentiallyUndefinedFormDataWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PotentiallyUndefinedFormDataResponse, error)

	PotentiallyUndefinedFormDataWithResponse(ctx context.Context, body PotentiallyUndefinedFormDataJSONRequestBody, reqEditors ...RequestEditorFn) (*PotentiallyUndefinedFormDataResponse, error)
}

type OneOfWithTopLevelDiscriminatorAndMappingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r OneOfWithTopLevelDiscriminatorAndMappingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OneOfWithTopLevelDiscriminatorAndMappingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OneOfWithTopLevelDiscriminatorNoMappingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r OneOfWithTopLevelDiscriminatorNoMappingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OneOfWithTopLevelDiscriminatorNoMappingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EmbeddedDiscriminatorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r EmbeddedDiscriminatorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EmbeddedDiscriminatorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OneOfWithImproperlyPlacedDiscriminatorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r OneOfWithImproperlyPlacedDiscriminatorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OneOfWithImproperlyPlacedDiscriminatorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MappingOfSchemaNamesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r MappingOfSchemaNamesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MappingOfSchemaNamesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MappingWithDuplicateSchemasResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r MappingWithDuplicateSchemasResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MappingWithDuplicateSchemasResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NestedOneOfObjectWithNestedOneOfResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r NestedOneOfObjectWithNestedOneOfResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NestedOneOfObjectWithNestedOneOfResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OneofAllofTopLevelDiscResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r OneofAllofTopLevelDiscResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OneofAllofTopLevelDiscResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PotentiallyUndefinedFormDataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PotentiallyUndefinedFormDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PotentiallyUndefinedFormDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// OneOfWithTopLevelDiscriminatorAndMappingWithBodyWithResponse request with arbitrary body returning *OneOfWithTopLevelDiscriminatorAndMappingResponse
func (c *ClientWithResponses) OneOfWithTopLevelDiscriminatorAndMappingWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OneOfWithTopLevelDiscriminatorAndMappingResponse, error) {
	rsp, err := c.OneOfWithTopLevelDiscriminatorAndMappingWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOneOfWithTopLevelDiscriminatorAndMappingResponse(rsp)
}

func (c *ClientWithResponses) OneOfWithTopLevelDiscriminatorAndMappingWithResponse(ctx context.Context, body OneOfWithTopLevelDiscriminatorAndMappingJSONRequestBody, reqEditors ...RequestEditorFn) (*OneOfWithTopLevelDiscriminatorAndMappingResponse, error) {
	rsp, err := c.OneOfWithTopLevelDiscriminatorAndMapping(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOneOfWithTopLevelDiscriminatorAndMappingResponse(rsp)
}

// OneOfWithTopLevelDiscriminatorNoMappingWithBodyWithResponse request with arbitrary body returning *OneOfWithTopLevelDiscriminatorNoMappingResponse
func (c *ClientWithResponses) OneOfWithTopLevelDiscriminatorNoMappingWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OneOfWithTopLevelDiscriminatorNoMappingResponse, error) {
	rsp, err := c.OneOfWithTopLevelDiscriminatorNoMappingWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOneOfWithTopLevelDiscriminatorNoMappingResponse(rsp)
}

func (c *ClientWithResponses) OneOfWithTopLevelDiscriminatorNoMappingWithResponse(ctx context.Context, body OneOfWithTopLevelDiscriminatorNoMappingJSONRequestBody, reqEditors ...RequestEditorFn) (*OneOfWithTopLevelDiscriminatorNoMappingResponse, error) {
	rsp, err := c.OneOfWithTopLevelDiscriminatorNoMapping(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOneOfWithTopLevelDiscriminatorNoMappingResponse(rsp)
}

// EmbeddedDiscriminatorWithBodyWithResponse request with arbitrary body returning *EmbeddedDiscriminatorResponse
func (c *ClientWithResponses) EmbeddedDiscriminatorWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EmbeddedDiscriminatorResponse, error) {
	rsp, err := c.EmbeddedDiscriminatorWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEmbeddedDiscriminatorResponse(rsp)
}

func (c *ClientWithResponses) EmbeddedDiscriminatorWithResponse(ctx context.Context, body EmbeddedDiscriminatorJSONRequestBody, reqEditors ...RequestEditorFn) (*EmbeddedDiscriminatorResponse, error) {
	rsp, err := c.EmbeddedDiscriminator(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEmbeddedDiscriminatorResponse(rsp)
}

// OneOfWithImproperlyPlacedDiscriminatorWithBodyWithResponse request with arbitrary body returning *OneOfWithImproperlyPlacedDiscriminatorResponse
func (c *ClientWithResponses) OneOfWithImproperlyPlacedDiscriminatorWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OneOfWithImproperlyPlacedDiscriminatorResponse, error) {
	rsp, err := c.OneOfWithImproperlyPlacedDiscriminatorWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOneOfWithImproperlyPlacedDiscriminatorResponse(rsp)
}

func (c *ClientWithResponses) OneOfWithImproperlyPlacedDiscriminatorWithResponse(ctx context.Context, body OneOfWithImproperlyPlacedDiscriminatorJSONRequestBody, reqEditors ...RequestEditorFn) (*OneOfWithImproperlyPlacedDiscriminatorResponse, error) {
	rsp, err := c.OneOfWithImproperlyPlacedDiscriminator(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOneOfWithImproperlyPlacedDiscriminatorResponse(rsp)
}

// MappingOfSchemaNamesWithBodyWithResponse request with arbitrary body returning *MappingOfSchemaNamesResponse
func (c *ClientWithResponses) MappingOfSchemaNamesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MappingOfSchemaNamesResponse, error) {
	rsp, err := c.MappingOfSchemaNamesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMappingOfSchemaNamesResponse(rsp)
}

func (c *ClientWithResponses) MappingOfSchemaNamesWithResponse(ctx context.Context, body MappingOfSchemaNamesJSONRequestBody, reqEditors ...RequestEditorFn) (*MappingOfSchemaNamesResponse, error) {
	rsp, err := c.MappingOfSchemaNames(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMappingOfSchemaNamesResponse(rsp)
}

// MappingWithDuplicateSchemasWithBodyWithResponse request with arbitrary body returning *MappingWithDuplicateSchemasResponse
func (c *ClientWithResponses) MappingWithDuplicateSchemasWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MappingWithDuplicateSchemasResponse, error) {
	rsp, err := c.MappingWithDuplicateSchemasWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMappingWithDuplicateSchemasResponse(rsp)
}

func (c *ClientWithResponses) MappingWithDuplicateSchemasWithResponse(ctx context.Context, body MappingWithDuplicateSchemasJSONRequestBody, reqEditors ...RequestEditorFn) (*MappingWithDuplicateSchemasResponse, error) {
	rsp, err := c.MappingWithDuplicateSchemas(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMappingWithDuplicateSchemasResponse(rsp)
}

// NestedOneOfObjectWithNestedOneOfWithBodyWithResponse request with arbitrary body returning *NestedOneOfObjectWithNestedOneOfResponse
func (c *ClientWithResponses) NestedOneOfObjectWithNestedOneOfWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NestedOneOfObjectWithNestedOneOfResponse, error) {
	rsp, err := c.NestedOneOfObjectWithNestedOneOfWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNestedOneOfObjectWithNestedOneOfResponse(rsp)
}

func (c *ClientWithResponses) NestedOneOfObjectWithNestedOneOfWithResponse(ctx context.Context, body NestedOneOfObjectWithNestedOneOfJSONRequestBody, reqEditors ...RequestEditorFn) (*NestedOneOfObjectWithNestedOneOfResponse, error) {
	rsp, err := c.NestedOneOfObjectWithNestedOneOf(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNestedOneOfObjectWithNestedOneOfResponse(rsp)
}

// OneofAllofTopLevelDiscWithBodyWithResponse request with arbitrary body returning *OneofAllofTopLevelDiscResponse
func (c *ClientWithResponses) OneofAllofTopLevelDiscWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OneofAllofTopLevelDiscResponse, error) {
	rsp, err := c.OneofAllofTopLevelDiscWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOneofAllofTopLevelDiscResponse(rsp)
}

func (c *ClientWithResponses) OneofAllofTopLevelDiscWithResponse(ctx context.Context, body OneofAllofTopLevelDiscJSONRequestBody, reqEditors ...RequestEditorFn) (*OneofAllofTopLevelDiscResponse, error) {
	rsp, err := c.OneofAllofTopLevelDisc(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOneofAllofTopLevelDiscResponse(rsp)
}

// PotentiallyUndefinedFormDataWithBodyWithResponse request with arbitrary body returning *PotentiallyUndefinedFormDataResponse
func (c *ClientWithResponses) PotentiallyUndefinedFormDataWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PotentiallyUndefinedFormDataResponse, error) {
	rsp, err := c.PotentiallyUndefinedFormDataWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePotentiallyUndefinedFormDataResponse(rsp)
}

func (c *ClientWithResponses) PotentiallyUndefinedFormDataWithResponse(ctx context.Context, body PotentiallyUndefinedFormDataJSONRequestBody, reqEditors ...RequestEditorFn) (*PotentiallyUndefinedFormDataResponse, error) {
	rsp, err := c.PotentiallyUndefinedFormData(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePotentiallyUndefinedFormDataResponse(rsp)
}

// ParseOneOfWithTopLevelDiscriminatorAndMappingResponse parses an HTTP response from a OneOfWithTopLevelDiscriminatorAndMappingWithResponse call
func ParseOneOfWithTopLevelDiscriminatorAndMappingResponse(rsp *http.Response) (*OneOfWithTopLevelDiscriminatorAndMappingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OneOfWithTopLevelDiscriminatorAndMappingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseOneOfWithTopLevelDiscriminatorNoMappingResponse parses an HTTP response from a OneOfWithTopLevelDiscriminatorNoMappingWithResponse call
func ParseOneOfWithTopLevelDiscriminatorNoMappingResponse(rsp *http.Response) (*OneOfWithTopLevelDiscriminatorNoMappingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OneOfWithTopLevelDiscriminatorNoMappingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseEmbeddedDiscriminatorResponse parses an HTTP response from a EmbeddedDiscriminatorWithResponse call
func ParseEmbeddedDiscriminatorResponse(rsp *http.Response) (*EmbeddedDiscriminatorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EmbeddedDiscriminatorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseOneOfWithImproperlyPlacedDiscriminatorResponse parses an HTTP response from a OneOfWithImproperlyPlacedDiscriminatorWithResponse call
func ParseOneOfWithImproperlyPlacedDiscriminatorResponse(rsp *http.Response) (*OneOfWithImproperlyPlacedDiscriminatorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OneOfWithImproperlyPlacedDiscriminatorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseMappingOfSchemaNamesResponse parses an HTTP response from a MappingOfSchemaNamesWithResponse call
func ParseMappingOfSchemaNamesResponse(rsp *http.Response) (*MappingOfSchemaNamesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MappingOfSchemaNamesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseMappingWithDuplicateSchemasResponse parses an HTTP response from a MappingWithDuplicateSchemasWithResponse call
func ParseMappingWithDuplicateSchemasResponse(rsp *http.Response) (*MappingWithDuplicateSchemasResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MappingWithDuplicateSchemasResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseNestedOneOfObjectWithNestedOneOfResponse parses an HTTP response from a NestedOneOfObjectWithNestedOneOfWithResponse call
func ParseNestedOneOfObjectWithNestedOneOfResponse(rsp *http.Response) (*NestedOneOfObjectWithNestedOneOfResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NestedOneOfObjectWithNestedOneOfResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseOneofAllofTopLevelDiscResponse parses an HTTP response from a OneofAllofTopLevelDiscWithResponse call
func ParseOneofAllofTopLevelDiscResponse(rsp *http.Response) (*OneofAllofTopLevelDiscResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OneofAllofTopLevelDiscResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePotentiallyUndefinedFormDataResponse parses an HTTP response from a PotentiallyUndefinedFormDataWithResponse call
func ParsePotentiallyUndefinedFormDataResponse(rsp *http.Response) (*PotentiallyUndefinedFormDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PotentiallyUndefinedFormDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// oneOf with discriminator and mapping
	// (PATCH /discriminator-with-mapping)
	OneOfWithTopLevelDiscriminatorAndMapping(ctx echo.Context) error
	// oneOf with top-level discriminator (no mapping)
	// (PATCH /discriminator-with-no-mapping)
	OneOfWithTopLevelDiscriminatorNoMapping(ctx echo.Context) error
	// oneOf request with a nested allOf and embedded discriminator
	// (PATCH /embedded-discriminator)
	EmbeddedDiscriminator(ctx echo.Context) error
	// oneOf with a discriminator that is referencing a property up a level
	// (PATCH /improper-discriminator-placement)
	OneOfWithImproperlyPlacedDiscriminator(ctx echo.Context) error
	// Discriminator with a schema name mapping
	// (PATCH /mapping-of-schema-names)
	MappingOfSchemaNames(ctx echo.Context) error
	// Handle a schema with duplicate mapping schemas
	// (PATCH /mapping-with-duplicate-schemas)
	MappingWithDuplicateSchemas(ctx echo.Context) error
	// oneOf request with a nested oneOf, and embedded discriminator
	// (PATCH /nested-one-of-object-with-nested-one-of)
	NestedOneOfObjectWithNestedOneOf(ctx echo.Context) error
	// oneOf request with a nested allOf and top level discriminator
	// (PATCH /oneof-allof-top-level-disc)
	OneofAllofTopLevelDisc(ctx echo.Context) error
	// Handling for potentially undefined formData
	// (POST /potentially-undefined-formData)
	PotentiallyUndefinedFormData(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// OneOfWithTopLevelDiscriminatorAndMapping converts echo context to params.
func (w *ServerInterfaceWrapper) OneOfWithTopLevelDiscriminatorAndMapping(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OneOfWithTopLevelDiscriminatorAndMapping(ctx)
	return err
}

// OneOfWithTopLevelDiscriminatorNoMapping converts echo context to params.
func (w *ServerInterfaceWrapper) OneOfWithTopLevelDiscriminatorNoMapping(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OneOfWithTopLevelDiscriminatorNoMapping(ctx)
	return err
}

// EmbeddedDiscriminator converts echo context to params.
func (w *ServerInterfaceWrapper) EmbeddedDiscriminator(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.EmbeddedDiscriminator(ctx)
	return err
}

// OneOfWithImproperlyPlacedDiscriminator converts echo context to params.
func (w *ServerInterfaceWrapper) OneOfWithImproperlyPlacedDiscriminator(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OneOfWithImproperlyPlacedDiscriminator(ctx)
	return err
}

// MappingOfSchemaNames converts echo context to params.
func (w *ServerInterfaceWrapper) MappingOfSchemaNames(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.MappingOfSchemaNames(ctx)
	return err
}

// MappingWithDuplicateSchemas converts echo context to params.
func (w *ServerInterfaceWrapper) MappingWithDuplicateSchemas(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.MappingWithDuplicateSchemas(ctx)
	return err
}

// NestedOneOfObjectWithNestedOneOf converts echo context to params.
func (w *ServerInterfaceWrapper) NestedOneOfObjectWithNestedOneOf(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.NestedOneOfObjectWithNestedOneOf(ctx)
	return err
}

// OneofAllofTopLevelDisc converts echo context to params.
func (w *ServerInterfaceWrapper) OneofAllofTopLevelDisc(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OneofAllofTopLevelDisc(ctx)
	return err
}

// PotentiallyUndefinedFormData converts echo context to params.
func (w *ServerInterfaceWrapper) PotentiallyUndefinedFormData(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PotentiallyUndefinedFormData(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.PATCH(baseURL+"/discriminator-with-mapping", wrapper.OneOfWithTopLevelDiscriminatorAndMapping)
	router.PATCH(baseURL+"/discriminator-with-no-mapping", wrapper.OneOfWithTopLevelDiscriminatorNoMapping)
	router.PATCH(baseURL+"/embedded-discriminator", wrapper.EmbeddedDiscriminator)
	router.PATCH(baseURL+"/improper-discriminator-placement", wrapper.OneOfWithImproperlyPlacedDiscriminator)
	router.PATCH(baseURL+"/mapping-of-schema-names", wrapper.MappingOfSchemaNames)
	router.PATCH(baseURL+"/mapping-with-duplicate-schemas", wrapper.MappingWithDuplicateSchemas)
	router.PATCH(baseURL+"/nested-one-of-object-with-nested-one-of", wrapper.NestedOneOfObjectWithNestedOneOf)
	router.PATCH(baseURL+"/oneof-allof-top-level-disc", wrapper.OneofAllofTopLevelDisc)
	router.POST(baseURL+"/potentially-undefined-formData", wrapper.PotentiallyUndefinedFormData)

}
