// Code generated by ogen, DO NOT EDIT.

package api

import (
	"github.com/go-faster/errors"
)

// AnythingAllOfObjectOK is response for AnythingAllOfObject operation.
type AnythingAllOfObjectOK struct{}

// Merged schema.
type AnythingAllOfObjectReq struct {
	A OptString `json:"a"`
	B OptString `json:"b"`
	C OptString `json:"c"`
	D OptString `json:"d"`
}

// GetA returns the value of A.
func (s *AnythingAllOfObjectReq) GetA() OptString {
	return s.A
}

// GetB returns the value of B.
func (s *AnythingAllOfObjectReq) GetB() OptString {
	return s.B
}

// GetC returns the value of C.
func (s *AnythingAllOfObjectReq) GetC() OptString {
	return s.C
}

// GetD returns the value of D.
func (s *AnythingAllOfObjectReq) GetD() OptString {
	return s.D
}

// SetA sets the value of A.
func (s *AnythingAllOfObjectReq) SetA(val OptString) {
	s.A = val
}

// SetB sets the value of B.
func (s *AnythingAllOfObjectReq) SetB(val OptString) {
	s.B = val
}

// SetC sets the value of C.
func (s *AnythingAllOfObjectReq) SetC(val OptString) {
	s.C = val
}

// SetD sets the value of D.
func (s *AnythingAllOfObjectReq) SetD(val OptString) {
	s.D = val
}

// AnythingAnyOfPrimitiveOK is response for AnythingAnyOfPrimitive operation.
type AnythingAnyOfPrimitiveOK struct{}

// AnythingAnyOfPrimitiveReq represents sum type.
type AnythingAnyOfPrimitiveReq struct {
	Type   AnythingAnyOfPrimitiveReqType // switch on this field
	String string
	Int    int
}

// AnythingAnyOfPrimitiveReqType is oneOf type of AnythingAnyOfPrimitiveReq.
type AnythingAnyOfPrimitiveReqType string

// Possible values for AnythingAnyOfPrimitiveReqType.
const (
	StringAnythingAnyOfPrimitiveReq AnythingAnyOfPrimitiveReqType = "string"
	IntAnythingAnyOfPrimitiveReq    AnythingAnyOfPrimitiveReqType = "int"
)

// IsString reports whether AnythingAnyOfPrimitiveReq is string.
func (s AnythingAnyOfPrimitiveReq) IsString() bool { return s.Type == StringAnythingAnyOfPrimitiveReq }

// IsInt reports whether AnythingAnyOfPrimitiveReq is int.
func (s AnythingAnyOfPrimitiveReq) IsInt() bool { return s.Type == IntAnythingAnyOfPrimitiveReq }

// SetString sets AnythingAnyOfPrimitiveReq to string.
func (s *AnythingAnyOfPrimitiveReq) SetString(v string) {
	s.Type = StringAnythingAnyOfPrimitiveReq
	s.String = v
}

// GetString returns string and true boolean if AnythingAnyOfPrimitiveReq is string.
func (s AnythingAnyOfPrimitiveReq) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringAnythingAnyOfPrimitiveReq returns new AnythingAnyOfPrimitiveReq from string.
func NewStringAnythingAnyOfPrimitiveReq(v string) AnythingAnyOfPrimitiveReq {
	var s AnythingAnyOfPrimitiveReq
	s.SetString(v)
	return s
}

// SetInt sets AnythingAnyOfPrimitiveReq to int.
func (s *AnythingAnyOfPrimitiveReq) SetInt(v int) {
	s.Type = IntAnythingAnyOfPrimitiveReq
	s.Int = v
}

// GetInt returns int and true boolean if AnythingAnyOfPrimitiveReq is int.
func (s AnythingAnyOfPrimitiveReq) GetInt() (v int, ok bool) {
	if !s.IsInt() {
		return v, false
	}
	return s.Int, true
}

// NewIntAnythingAnyOfPrimitiveReq returns new AnythingAnyOfPrimitiveReq from int.
func NewIntAnythingAnyOfPrimitiveReq(v int) AnythingAnyOfPrimitiveReq {
	var s AnythingAnyOfPrimitiveReq
	s.SetInt(v)
	return s
}

// AnythingNestedOneOfObjectRefOK is response for AnythingNestedOneOfObjectRef operation.
type AnythingNestedOneOfObjectRefOK struct{}

type AnythingNestedOneOfObjectRefReq struct {
	Config OptAnythingNestedOneOfObjectRefReqConfig `json:"config"`
}

// GetConfig returns the value of Config.
func (s *AnythingNestedOneOfObjectRefReq) GetConfig() OptAnythingNestedOneOfObjectRefReqConfig {
	return s.Config
}

// SetConfig sets the value of Config.
func (s *AnythingNestedOneOfObjectRefReq) SetConfig(val OptAnythingNestedOneOfObjectRefReqConfig) {
	s.Config = val
}

// AnythingNestedOneOfObjectRefReqConfig represents sum type.
type AnythingNestedOneOfObjectRefReqConfig struct {
	Type    AnythingNestedOneOfObjectRefReqConfigType // switch on this field
	Object1 Object1
	Object2 Object2
}

// AnythingNestedOneOfObjectRefReqConfigType is oneOf type of AnythingNestedOneOfObjectRefReqConfig.
type AnythingNestedOneOfObjectRefReqConfigType string

// Possible values for AnythingNestedOneOfObjectRefReqConfigType.
const (
	Object1AnythingNestedOneOfObjectRefReqConfig AnythingNestedOneOfObjectRefReqConfigType = "Object1"
	Object2AnythingNestedOneOfObjectRefReqConfig AnythingNestedOneOfObjectRefReqConfigType = "Object2"
)

// IsObject1 reports whether AnythingNestedOneOfObjectRefReqConfig is Object1.
func (s AnythingNestedOneOfObjectRefReqConfig) IsObject1() bool {
	return s.Type == Object1AnythingNestedOneOfObjectRefReqConfig
}

// IsObject2 reports whether AnythingNestedOneOfObjectRefReqConfig is Object2.
func (s AnythingNestedOneOfObjectRefReqConfig) IsObject2() bool {
	return s.Type == Object2AnythingNestedOneOfObjectRefReqConfig
}

// SetObject1 sets AnythingNestedOneOfObjectRefReqConfig to Object1.
func (s *AnythingNestedOneOfObjectRefReqConfig) SetObject1(v Object1) {
	s.Type = Object1AnythingNestedOneOfObjectRefReqConfig
	s.Object1 = v
}

// GetObject1 returns Object1 and true boolean if AnythingNestedOneOfObjectRefReqConfig is Object1.
func (s AnythingNestedOneOfObjectRefReqConfig) GetObject1() (v Object1, ok bool) {
	if !s.IsObject1() {
		return v, false
	}
	return s.Object1, true
}

// NewObject1AnythingNestedOneOfObjectRefReqConfig returns new AnythingNestedOneOfObjectRefReqConfig from Object1.
func NewObject1AnythingNestedOneOfObjectRefReqConfig(v Object1) AnythingNestedOneOfObjectRefReqConfig {
	var s AnythingNestedOneOfObjectRefReqConfig
	s.SetObject1(v)
	return s
}

// SetObject2 sets AnythingNestedOneOfObjectRefReqConfig to Object2.
func (s *AnythingNestedOneOfObjectRefReqConfig) SetObject2(v Object2) {
	s.Type = Object2AnythingNestedOneOfObjectRefReqConfig
	s.Object2 = v
}

// GetObject2 returns Object2 and true boolean if AnythingNestedOneOfObjectRefReqConfig is Object2.
func (s AnythingNestedOneOfObjectRefReqConfig) GetObject2() (v Object2, ok bool) {
	if !s.IsObject2() {
		return v, false
	}
	return s.Object2, true
}

// NewObject2AnythingNestedOneOfObjectRefReqConfig returns new AnythingNestedOneOfObjectRefReqConfig from Object2.
func NewObject2AnythingNestedOneOfObjectRefReqConfig(v Object2) AnythingNestedOneOfObjectRefReqConfig {
	var s AnythingNestedOneOfObjectRefReqConfig
	s.SetObject2(v)
	return s
}

// AnythingOneOfObjectOK is response for AnythingOneOfObject operation.
type AnythingOneOfObjectOK struct{}

// AnythingOneOfObjectRefOK is response for AnythingOneOfObjectRef operation.
type AnythingOneOfObjectRefOK struct{}

// AnythingOneOfObjectRefReq represents sum type.
type AnythingOneOfObjectRefReq struct {
	Type    AnythingOneOfObjectRefReqType // switch on this field
	Object1 Object1
	Object2 Object2
}

// AnythingOneOfObjectRefReqType is oneOf type of AnythingOneOfObjectRefReq.
type AnythingOneOfObjectRefReqType string

// Possible values for AnythingOneOfObjectRefReqType.
const (
	Object1AnythingOneOfObjectRefReq AnythingOneOfObjectRefReqType = "Object1"
	Object2AnythingOneOfObjectRefReq AnythingOneOfObjectRefReqType = "Object2"
)

// IsObject1 reports whether AnythingOneOfObjectRefReq is Object1.
func (s AnythingOneOfObjectRefReq) IsObject1() bool {
	return s.Type == Object1AnythingOneOfObjectRefReq
}

// IsObject2 reports whether AnythingOneOfObjectRefReq is Object2.
func (s AnythingOneOfObjectRefReq) IsObject2() bool {
	return s.Type == Object2AnythingOneOfObjectRefReq
}

// SetObject1 sets AnythingOneOfObjectRefReq to Object1.
func (s *AnythingOneOfObjectRefReq) SetObject1(v Object1) {
	s.Type = Object1AnythingOneOfObjectRefReq
	s.Object1 = v
}

// GetObject1 returns Object1 and true boolean if AnythingOneOfObjectRefReq is Object1.
func (s AnythingOneOfObjectRefReq) GetObject1() (v Object1, ok bool) {
	if !s.IsObject1() {
		return v, false
	}
	return s.Object1, true
}

// NewObject1AnythingOneOfObjectRefReq returns new AnythingOneOfObjectRefReq from Object1.
func NewObject1AnythingOneOfObjectRefReq(v Object1) AnythingOneOfObjectRefReq {
	var s AnythingOneOfObjectRefReq
	s.SetObject1(v)
	return s
}

// SetObject2 sets AnythingOneOfObjectRefReq to Object2.
func (s *AnythingOneOfObjectRefReq) SetObject2(v Object2) {
	s.Type = Object2AnythingOneOfObjectRefReq
	s.Object2 = v
}

// GetObject2 returns Object2 and true boolean if AnythingOneOfObjectRefReq is Object2.
func (s AnythingOneOfObjectRefReq) GetObject2() (v Object2, ok bool) {
	if !s.IsObject2() {
		return v, false
	}
	return s.Object2, true
}

// NewObject2AnythingOneOfObjectRefReq returns new AnythingOneOfObjectRefReq from Object2.
func NewObject2AnythingOneOfObjectRefReq(v Object2) AnythingOneOfObjectRefReq {
	var s AnythingOneOfObjectRefReq
	s.SetObject2(v)
	return s
}

// AnythingOneOfObjectReq represents sum type.
type AnythingOneOfObjectReq struct {
	Type                    AnythingOneOfObjectReqType // switch on this field
	AnythingOneOfObjectReq0 AnythingOneOfObjectReq0
	AnythingOneOfObjectReq1 AnythingOneOfObjectReq1
}

// AnythingOneOfObjectReqType is oneOf type of AnythingOneOfObjectReq.
type AnythingOneOfObjectReqType string

// Possible values for AnythingOneOfObjectReqType.
const (
	AnythingOneOfObjectReq0AnythingOneOfObjectReq AnythingOneOfObjectReqType = "AnythingOneOfObjectReq0"
	AnythingOneOfObjectReq1AnythingOneOfObjectReq AnythingOneOfObjectReqType = "AnythingOneOfObjectReq1"
)

// IsAnythingOneOfObjectReq0 reports whether AnythingOneOfObjectReq is AnythingOneOfObjectReq0.
func (s AnythingOneOfObjectReq) IsAnythingOneOfObjectReq0() bool {
	return s.Type == AnythingOneOfObjectReq0AnythingOneOfObjectReq
}

// IsAnythingOneOfObjectReq1 reports whether AnythingOneOfObjectReq is AnythingOneOfObjectReq1.
func (s AnythingOneOfObjectReq) IsAnythingOneOfObjectReq1() bool {
	return s.Type == AnythingOneOfObjectReq1AnythingOneOfObjectReq
}

// SetAnythingOneOfObjectReq0 sets AnythingOneOfObjectReq to AnythingOneOfObjectReq0.
func (s *AnythingOneOfObjectReq) SetAnythingOneOfObjectReq0(v AnythingOneOfObjectReq0) {
	s.Type = AnythingOneOfObjectReq0AnythingOneOfObjectReq
	s.AnythingOneOfObjectReq0 = v
}

// GetAnythingOneOfObjectReq0 returns AnythingOneOfObjectReq0 and true boolean if AnythingOneOfObjectReq is AnythingOneOfObjectReq0.
func (s AnythingOneOfObjectReq) GetAnythingOneOfObjectReq0() (v AnythingOneOfObjectReq0, ok bool) {
	if !s.IsAnythingOneOfObjectReq0() {
		return v, false
	}
	return s.AnythingOneOfObjectReq0, true
}

// NewAnythingOneOfObjectReq0AnythingOneOfObjectReq returns new AnythingOneOfObjectReq from AnythingOneOfObjectReq0.
func NewAnythingOneOfObjectReq0AnythingOneOfObjectReq(v AnythingOneOfObjectReq0) AnythingOneOfObjectReq {
	var s AnythingOneOfObjectReq
	s.SetAnythingOneOfObjectReq0(v)
	return s
}

// SetAnythingOneOfObjectReq1 sets AnythingOneOfObjectReq to AnythingOneOfObjectReq1.
func (s *AnythingOneOfObjectReq) SetAnythingOneOfObjectReq1(v AnythingOneOfObjectReq1) {
	s.Type = AnythingOneOfObjectReq1AnythingOneOfObjectReq
	s.AnythingOneOfObjectReq1 = v
}

// GetAnythingOneOfObjectReq1 returns AnythingOneOfObjectReq1 and true boolean if AnythingOneOfObjectReq is AnythingOneOfObjectReq1.
func (s AnythingOneOfObjectReq) GetAnythingOneOfObjectReq1() (v AnythingOneOfObjectReq1, ok bool) {
	if !s.IsAnythingOneOfObjectReq1() {
		return v, false
	}
	return s.AnythingOneOfObjectReq1, true
}

// NewAnythingOneOfObjectReq1AnythingOneOfObjectReq returns new AnythingOneOfObjectReq from AnythingOneOfObjectReq1.
func NewAnythingOneOfObjectReq1AnythingOneOfObjectReq(v AnythingOneOfObjectReq1) AnythingOneOfObjectReq {
	var s AnythingOneOfObjectReq
	s.SetAnythingOneOfObjectReq1(v)
	return s
}

type AnythingOneOfObjectReq0 struct {
	A OptString `json:"a"`
	B OptString `json:"b"`
}

// GetA returns the value of A.
func (s *AnythingOneOfObjectReq0) GetA() OptString {
	return s.A
}

// GetB returns the value of B.
func (s *AnythingOneOfObjectReq0) GetB() OptString {
	return s.B
}

// SetA sets the value of A.
func (s *AnythingOneOfObjectReq0) SetA(val OptString) {
	s.A = val
}

// SetB sets the value of B.
func (s *AnythingOneOfObjectReq0) SetB(val OptString) {
	s.B = val
}

type AnythingOneOfObjectReq1 struct {
	C OptString `json:"c"`
	D OptString `json:"d"`
}

// GetC returns the value of C.
func (s *AnythingOneOfObjectReq1) GetC() OptString {
	return s.C
}

// GetD returns the value of D.
func (s *AnythingOneOfObjectReq1) GetD() OptString {
	return s.D
}

// SetC sets the value of C.
func (s *AnythingOneOfObjectReq1) SetC(val OptString) {
	s.C = val
}

// SetD sets the value of D.
func (s *AnythingOneOfObjectReq1) SetD(val OptString) {
	s.D = val
}

// AnythingOneOfPrimitiveOK is response for AnythingOneOfPrimitive operation.
type AnythingOneOfPrimitiveOK struct{}

// AnythingOneOfPrimitiveReq represents sum type.
type AnythingOneOfPrimitiveReq struct {
	Type   AnythingOneOfPrimitiveReqType // switch on this field
	String string
	Int    int
}

// AnythingOneOfPrimitiveReqType is oneOf type of AnythingOneOfPrimitiveReq.
type AnythingOneOfPrimitiveReqType string

// Possible values for AnythingOneOfPrimitiveReqType.
const (
	StringAnythingOneOfPrimitiveReq AnythingOneOfPrimitiveReqType = "string"
	IntAnythingOneOfPrimitiveReq    AnythingOneOfPrimitiveReqType = "int"
)

// IsString reports whether AnythingOneOfPrimitiveReq is string.
func (s AnythingOneOfPrimitiveReq) IsString() bool { return s.Type == StringAnythingOneOfPrimitiveReq }

// IsInt reports whether AnythingOneOfPrimitiveReq is int.
func (s AnythingOneOfPrimitiveReq) IsInt() bool { return s.Type == IntAnythingOneOfPrimitiveReq }

// SetString sets AnythingOneOfPrimitiveReq to string.
func (s *AnythingOneOfPrimitiveReq) SetString(v string) {
	s.Type = StringAnythingOneOfPrimitiveReq
	s.String = v
}

// GetString returns string and true boolean if AnythingOneOfPrimitiveReq is string.
func (s AnythingOneOfPrimitiveReq) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringAnythingOneOfPrimitiveReq returns new AnythingOneOfPrimitiveReq from string.
func NewStringAnythingOneOfPrimitiveReq(v string) AnythingOneOfPrimitiveReq {
	var s AnythingOneOfPrimitiveReq
	s.SetString(v)
	return s
}

// SetInt sets AnythingOneOfPrimitiveReq to int.
func (s *AnythingOneOfPrimitiveReq) SetInt(v int) {
	s.Type = IntAnythingOneOfPrimitiveReq
	s.Int = v
}

// GetInt returns int and true boolean if AnythingOneOfPrimitiveReq is int.
func (s AnythingOneOfPrimitiveReq) GetInt() (v int, ok bool) {
	if !s.IsInt() {
		return v, false
	}
	return s.Int, true
}

// NewIntAnythingOneOfPrimitiveReq returns new AnythingOneOfPrimitiveReq from int.
func NewIntAnythingOneOfPrimitiveReq(v int) AnythingOneOfPrimitiveReq {
	var s AnythingOneOfPrimitiveReq
	s.SetInt(v)
	return s
}

// Merged schema.
// Ref: #/components/schemas/Cat
type Cat struct {
	PetType string  `json:"pet_type"`
	Hunts   OptBool `json:"hunts"`
	Age     OptInt  `json:"age"`
}

// GetPetType returns the value of PetType.
func (s *Cat) GetPetType() string {
	return s.PetType
}

// GetHunts returns the value of Hunts.
func (s *Cat) GetHunts() OptBool {
	return s.Hunts
}

// GetAge returns the value of Age.
func (s *Cat) GetAge() OptInt {
	return s.Age
}

// SetPetType sets the value of PetType.
func (s *Cat) SetPetType(val string) {
	s.PetType = val
}

// SetHunts sets the value of Hunts.
func (s *Cat) SetHunts(val OptBool) {
	s.Hunts = val
}

// SetAge sets the value of Age.
func (s *Cat) SetAge(val OptInt) {
	s.Age = val
}

// Merged schema.
// Ref: #/components/schemas/Dog
type Dog struct {
	PetType string      `json:"pet_type"`
	Bark    OptBool     `json:"bark"`
	Breed   OptDogBreed `json:"breed"`
}

// GetPetType returns the value of PetType.
func (s *Dog) GetPetType() string {
	return s.PetType
}

// GetBark returns the value of Bark.
func (s *Dog) GetBark() OptBool {
	return s.Bark
}

// GetBreed returns the value of Breed.
func (s *Dog) GetBreed() OptDogBreed {
	return s.Breed
}

// SetPetType sets the value of PetType.
func (s *Dog) SetPetType(val string) {
	s.PetType = val
}

// SetBark sets the value of Bark.
func (s *Dog) SetBark(val OptBool) {
	s.Bark = val
}

// SetBreed sets the value of Breed.
func (s *Dog) SetBreed(val OptDogBreed) {
	s.Breed = val
}

type DogBreed string

const (
	DogBreedDingo     DogBreed = "Dingo"
	DogBreedHusky     DogBreed = "Husky"
	DogBreedRetriever DogBreed = "Retriever"
	DogBreedShepherd  DogBreed = "Shepherd"
)

// AllValues returns all DogBreed values.
func (DogBreed) AllValues() []DogBreed {
	return []DogBreed{
		DogBreedDingo,
		DogBreedHusky,
		DogBreedRetriever,
		DogBreedShepherd,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s DogBreed) MarshalText() ([]byte, error) {
	switch s {
	case DogBreedDingo:
		return []byte(s), nil
	case DogBreedHusky:
		return []byte(s), nil
	case DogBreedRetriever:
		return []byte(s), nil
	case DogBreedShepherd:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *DogBreed) UnmarshalText(data []byte) error {
	switch DogBreed(data) {
	case DogBreedDingo:
		*s = DogBreedDingo
		return nil
	case DogBreedHusky:
		*s = DogBreedHusky
		return nil
	case DogBreedRetriever:
		*s = DogBreedRetriever
		return nil
	case DogBreedShepherd:
		*s = DogBreedShepherd
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// GetPetsOK is response for GetPets operation.
type GetPetsOK struct{}

// GetPetsReq represents sum type.
type GetPetsReq struct {
	Type GetPetsReqType // switch on this field
	Cat  Cat
	Dog  Dog
}

// GetPetsReqType is oneOf type of GetPetsReq.
type GetPetsReqType string

// Possible values for GetPetsReqType.
const (
	CatGetPetsReq GetPetsReqType = "Cat"
	DogGetPetsReq GetPetsReqType = "Dog"
)

// IsCat reports whether GetPetsReq is Cat.
func (s GetPetsReq) IsCat() bool { return s.Type == CatGetPetsReq }

// IsDog reports whether GetPetsReq is Dog.
func (s GetPetsReq) IsDog() bool { return s.Type == DogGetPetsReq }

// SetCat sets GetPetsReq to Cat.
func (s *GetPetsReq) SetCat(v Cat) {
	s.Type = CatGetPetsReq
	s.Cat = v
}

// GetCat returns Cat and true boolean if GetPetsReq is Cat.
func (s GetPetsReq) GetCat() (v Cat, ok bool) {
	if !s.IsCat() {
		return v, false
	}
	return s.Cat, true
}

// NewCatGetPetsReq returns new GetPetsReq from Cat.
func NewCatGetPetsReq(v Cat) GetPetsReq {
	var s GetPetsReq
	s.SetCat(v)
	return s
}

// SetDog sets GetPetsReq to Dog.
func (s *GetPetsReq) SetDog(v Dog) {
	s.Type = DogGetPetsReq
	s.Dog = v
}

// GetDog returns Dog and true boolean if GetPetsReq is Dog.
func (s GetPetsReq) GetDog() (v Dog, ok bool) {
	if !s.IsDog() {
		return v, false
	}
	return s.Dog, true
}

// NewDogGetPetsReq returns new GetPetsReq from Dog.
func NewDogGetPetsReq(v Dog) GetPetsReq {
	var s GetPetsReq
	s.SetDog(v)
	return s
}

// Ref: #/components/schemas/object1
type Object1 struct {
	A OptString `json:"a"`
	B OptString `json:"b"`
}

// GetA returns the value of A.
func (s *Object1) GetA() OptString {
	return s.A
}

// GetB returns the value of B.
func (s *Object1) GetB() OptString {
	return s.B
}

// SetA sets the value of A.
func (s *Object1) SetA(val OptString) {
	s.A = val
}

// SetB sets the value of B.
func (s *Object1) SetB(val OptString) {
	s.B = val
}

// Ref: #/components/schemas/object2
type Object2 struct {
	C OptString `json:"c"`
	D OptString `json:"d"`
}

// GetC returns the value of C.
func (s *Object2) GetC() OptString {
	return s.C
}

// GetD returns the value of D.
func (s *Object2) GetD() OptString {
	return s.D
}

// SetC sets the value of C.
func (s *Object2) SetC(val OptString) {
	s.C = val
}

// SetD sets the value of D.
func (s *Object2) SetD(val OptString) {
	s.D = val
}

// NewOptAnythingAllOfObjectReq returns new OptAnythingAllOfObjectReq with value set to v.
func NewOptAnythingAllOfObjectReq(v AnythingAllOfObjectReq) OptAnythingAllOfObjectReq {
	return OptAnythingAllOfObjectReq{
		Value: v,
		Set:   true,
	}
}

// OptAnythingAllOfObjectReq is optional AnythingAllOfObjectReq.
type OptAnythingAllOfObjectReq struct {
	Value AnythingAllOfObjectReq
	Set   bool
}

// IsSet returns true if OptAnythingAllOfObjectReq was set.
func (o OptAnythingAllOfObjectReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAnythingAllOfObjectReq) Reset() {
	var v AnythingAllOfObjectReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAnythingAllOfObjectReq) SetTo(v AnythingAllOfObjectReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAnythingAllOfObjectReq) Get() (v AnythingAllOfObjectReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAnythingAllOfObjectReq) Or(d AnythingAllOfObjectReq) AnythingAllOfObjectReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAnythingAnyOfPrimitiveReq returns new OptAnythingAnyOfPrimitiveReq with value set to v.
func NewOptAnythingAnyOfPrimitiveReq(v AnythingAnyOfPrimitiveReq) OptAnythingAnyOfPrimitiveReq {
	return OptAnythingAnyOfPrimitiveReq{
		Value: v,
		Set:   true,
	}
}

// OptAnythingAnyOfPrimitiveReq is optional AnythingAnyOfPrimitiveReq.
type OptAnythingAnyOfPrimitiveReq struct {
	Value AnythingAnyOfPrimitiveReq
	Set   bool
}

// IsSet returns true if OptAnythingAnyOfPrimitiveReq was set.
func (o OptAnythingAnyOfPrimitiveReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAnythingAnyOfPrimitiveReq) Reset() {
	var v AnythingAnyOfPrimitiveReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAnythingAnyOfPrimitiveReq) SetTo(v AnythingAnyOfPrimitiveReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAnythingAnyOfPrimitiveReq) Get() (v AnythingAnyOfPrimitiveReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAnythingAnyOfPrimitiveReq) Or(d AnythingAnyOfPrimitiveReq) AnythingAnyOfPrimitiveReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAnythingNestedOneOfObjectRefReq returns new OptAnythingNestedOneOfObjectRefReq with value set to v.
func NewOptAnythingNestedOneOfObjectRefReq(v AnythingNestedOneOfObjectRefReq) OptAnythingNestedOneOfObjectRefReq {
	return OptAnythingNestedOneOfObjectRefReq{
		Value: v,
		Set:   true,
	}
}

// OptAnythingNestedOneOfObjectRefReq is optional AnythingNestedOneOfObjectRefReq.
type OptAnythingNestedOneOfObjectRefReq struct {
	Value AnythingNestedOneOfObjectRefReq
	Set   bool
}

// IsSet returns true if OptAnythingNestedOneOfObjectRefReq was set.
func (o OptAnythingNestedOneOfObjectRefReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAnythingNestedOneOfObjectRefReq) Reset() {
	var v AnythingNestedOneOfObjectRefReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAnythingNestedOneOfObjectRefReq) SetTo(v AnythingNestedOneOfObjectRefReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAnythingNestedOneOfObjectRefReq) Get() (v AnythingNestedOneOfObjectRefReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAnythingNestedOneOfObjectRefReq) Or(d AnythingNestedOneOfObjectRefReq) AnythingNestedOneOfObjectRefReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAnythingNestedOneOfObjectRefReqConfig returns new OptAnythingNestedOneOfObjectRefReqConfig with value set to v.
func NewOptAnythingNestedOneOfObjectRefReqConfig(v AnythingNestedOneOfObjectRefReqConfig) OptAnythingNestedOneOfObjectRefReqConfig {
	return OptAnythingNestedOneOfObjectRefReqConfig{
		Value: v,
		Set:   true,
	}
}

// OptAnythingNestedOneOfObjectRefReqConfig is optional AnythingNestedOneOfObjectRefReqConfig.
type OptAnythingNestedOneOfObjectRefReqConfig struct {
	Value AnythingNestedOneOfObjectRefReqConfig
	Set   bool
}

// IsSet returns true if OptAnythingNestedOneOfObjectRefReqConfig was set.
func (o OptAnythingNestedOneOfObjectRefReqConfig) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAnythingNestedOneOfObjectRefReqConfig) Reset() {
	var v AnythingNestedOneOfObjectRefReqConfig
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAnythingNestedOneOfObjectRefReqConfig) SetTo(v AnythingNestedOneOfObjectRefReqConfig) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAnythingNestedOneOfObjectRefReqConfig) Get() (v AnythingNestedOneOfObjectRefReqConfig, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAnythingNestedOneOfObjectRefReqConfig) Or(d AnythingNestedOneOfObjectRefReqConfig) AnythingNestedOneOfObjectRefReqConfig {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAnythingOneOfObjectRefReq returns new OptAnythingOneOfObjectRefReq with value set to v.
func NewOptAnythingOneOfObjectRefReq(v AnythingOneOfObjectRefReq) OptAnythingOneOfObjectRefReq {
	return OptAnythingOneOfObjectRefReq{
		Value: v,
		Set:   true,
	}
}

// OptAnythingOneOfObjectRefReq is optional AnythingOneOfObjectRefReq.
type OptAnythingOneOfObjectRefReq struct {
	Value AnythingOneOfObjectRefReq
	Set   bool
}

// IsSet returns true if OptAnythingOneOfObjectRefReq was set.
func (o OptAnythingOneOfObjectRefReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAnythingOneOfObjectRefReq) Reset() {
	var v AnythingOneOfObjectRefReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAnythingOneOfObjectRefReq) SetTo(v AnythingOneOfObjectRefReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAnythingOneOfObjectRefReq) Get() (v AnythingOneOfObjectRefReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAnythingOneOfObjectRefReq) Or(d AnythingOneOfObjectRefReq) AnythingOneOfObjectRefReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAnythingOneOfObjectReq returns new OptAnythingOneOfObjectReq with value set to v.
func NewOptAnythingOneOfObjectReq(v AnythingOneOfObjectReq) OptAnythingOneOfObjectReq {
	return OptAnythingOneOfObjectReq{
		Value: v,
		Set:   true,
	}
}

// OptAnythingOneOfObjectReq is optional AnythingOneOfObjectReq.
type OptAnythingOneOfObjectReq struct {
	Value AnythingOneOfObjectReq
	Set   bool
}

// IsSet returns true if OptAnythingOneOfObjectReq was set.
func (o OptAnythingOneOfObjectReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAnythingOneOfObjectReq) Reset() {
	var v AnythingOneOfObjectReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAnythingOneOfObjectReq) SetTo(v AnythingOneOfObjectReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAnythingOneOfObjectReq) Get() (v AnythingOneOfObjectReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAnythingOneOfObjectReq) Or(d AnythingOneOfObjectReq) AnythingOneOfObjectReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAnythingOneOfPrimitiveReq returns new OptAnythingOneOfPrimitiveReq with value set to v.
func NewOptAnythingOneOfPrimitiveReq(v AnythingOneOfPrimitiveReq) OptAnythingOneOfPrimitiveReq {
	return OptAnythingOneOfPrimitiveReq{
		Value: v,
		Set:   true,
	}
}

// OptAnythingOneOfPrimitiveReq is optional AnythingOneOfPrimitiveReq.
type OptAnythingOneOfPrimitiveReq struct {
	Value AnythingOneOfPrimitiveReq
	Set   bool
}

// IsSet returns true if OptAnythingOneOfPrimitiveReq was set.
func (o OptAnythingOneOfPrimitiveReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAnythingOneOfPrimitiveReq) Reset() {
	var v AnythingOneOfPrimitiveReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAnythingOneOfPrimitiveReq) SetTo(v AnythingOneOfPrimitiveReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAnythingOneOfPrimitiveReq) Get() (v AnythingOneOfPrimitiveReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAnythingOneOfPrimitiveReq) Or(d AnythingOneOfPrimitiveReq) AnythingOneOfPrimitiveReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDogBreed returns new OptDogBreed with value set to v.
func NewOptDogBreed(v DogBreed) OptDogBreed {
	return OptDogBreed{
		Value: v,
		Set:   true,
	}
}

// OptDogBreed is optional DogBreed.
type OptDogBreed struct {
	Value DogBreed
	Set   bool
}

// IsSet returns true if OptDogBreed was set.
func (o OptDogBreed) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDogBreed) Reset() {
	var v DogBreed
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDogBreed) SetTo(v DogBreed) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDogBreed) Get() (v DogBreed, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDogBreed) Or(d DogBreed) DogBreed {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetPetsReq returns new OptGetPetsReq with value set to v.
func NewOptGetPetsReq(v GetPetsReq) OptGetPetsReq {
	return OptGetPetsReq{
		Value: v,
		Set:   true,
	}
}

// OptGetPetsReq is optional GetPetsReq.
type OptGetPetsReq struct {
	Value GetPetsReq
	Set   bool
}

// IsSet returns true if OptGetPetsReq was set.
func (o OptGetPetsReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetPetsReq) Reset() {
	var v GetPetsReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetPetsReq) SetTo(v GetPetsReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetPetsReq) Get() (v GetPetsReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetPetsReq) Or(d GetPetsReq) GetPetsReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}
