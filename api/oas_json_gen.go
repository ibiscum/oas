// Code generated by ogen, DO NOT EDIT.

package api

import (
	"math/bits"
	"strconv"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"

	"github.com/ogen-go/ogen/validate"
)

// Encode implements json.Marshaler.
func (s *AnythingAllOfObjectReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AnythingAllOfObjectReq) encodeFields(e *jx.Encoder) {
	{
		if s.A.Set {
			e.FieldStart("a")
			s.A.Encode(e)
		}
	}
	{
		if s.B.Set {
			e.FieldStart("b")
			s.B.Encode(e)
		}
	}
	{
		if s.C.Set {
			e.FieldStart("c")
			s.C.Encode(e)
		}
	}
	{
		if s.D.Set {
			e.FieldStart("d")
			s.D.Encode(e)
		}
	}
}

var jsonFieldsNameOfAnythingAllOfObjectReq = [4]string{
	0: "a",
	1: "b",
	2: "c",
	3: "d",
}

// Decode decodes AnythingAllOfObjectReq from json.
func (s *AnythingAllOfObjectReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AnythingAllOfObjectReq to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "a":
			if err := func() error {
				s.A.Reset()
				if err := s.A.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"a\"")
			}
		case "b":
			if err := func() error {
				s.B.Reset()
				if err := s.B.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"b\"")
			}
		case "c":
			if err := func() error {
				s.C.Reset()
				if err := s.C.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"c\"")
			}
		case "d":
			if err := func() error {
				s.D.Reset()
				if err := s.D.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"d\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AnythingAllOfObjectReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AnythingAllOfObjectReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AnythingAllOfObjectReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AnythingAnyOfPrimitiveReq as json.
func (s AnythingAnyOfPrimitiveReq) Encode(e *jx.Encoder) {
	switch s.Type {
	case StringAnythingAnyOfPrimitiveReq:
		e.Str(s.String)
	case IntAnythingAnyOfPrimitiveReq:
		e.Int(s.Int)
	}
}

// Decode decodes AnythingAnyOfPrimitiveReq from json.
func (s *AnythingAnyOfPrimitiveReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AnythingAnyOfPrimitiveReq to nil")
	}
	// Sum type type_discriminator.
	switch t := d.Next(); t {
	case jx.Number:
		v, err := d.Int()
		s.Int = int(v)
		if err != nil {
			return err
		}
		s.Type = IntAnythingAnyOfPrimitiveReq
	case jx.String:
		v, err := d.Str()
		s.String = string(v)
		if err != nil {
			return err
		}
		s.Type = StringAnythingAnyOfPrimitiveReq
	default:
		return errors.Errorf("unexpected json type %q", t)
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s AnythingAnyOfPrimitiveReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AnythingAnyOfPrimitiveReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AnythingNestedOneOfObjectRefReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AnythingNestedOneOfObjectRefReq) encodeFields(e *jx.Encoder) {
	{
		if s.Config.Set {
			e.FieldStart("config")
			s.Config.Encode(e)
		}
	}
}

var jsonFieldsNameOfAnythingNestedOneOfObjectRefReq = [1]string{
	0: "config",
}

// Decode decodes AnythingNestedOneOfObjectRefReq from json.
func (s *AnythingNestedOneOfObjectRefReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AnythingNestedOneOfObjectRefReq to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "config":
			if err := func() error {
				s.Config.Reset()
				if err := s.Config.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"config\"")
			}
		default:
			return errors.Errorf("unexpected field %q", k)
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AnythingNestedOneOfObjectRefReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AnythingNestedOneOfObjectRefReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AnythingNestedOneOfObjectRefReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AnythingNestedOneOfObjectRefReqConfig as json.
func (s AnythingNestedOneOfObjectRefReqConfig) Encode(e *jx.Encoder) {
	switch s.Type {
	case Object1AnythingNestedOneOfObjectRefReqConfig:
		s.Object1.Encode(e)
	case Object2AnythingNestedOneOfObjectRefReqConfig:
		s.Object2.Encode(e)
	}
}

func (s AnythingNestedOneOfObjectRefReqConfig) encodeFields(e *jx.Encoder) {
	switch s.Type {
	case Object1AnythingNestedOneOfObjectRefReqConfig:
		s.Object1.encodeFields(e)
	case Object2AnythingNestedOneOfObjectRefReqConfig:
		s.Object2.encodeFields(e)
	}
}

// Decode decodes AnythingNestedOneOfObjectRefReqConfig from json.
func (s *AnythingNestedOneOfObjectRefReqConfig) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AnythingNestedOneOfObjectRefReqConfig to nil")
	}
	// Sum type fields.
	if typ := d.Next(); typ != jx.Object {
		return errors.Errorf("unexpected json type %q", typ)
	}

	var found bool
	if err := d.Capture(func(d *jx.Decoder) error {
		return d.ObjBytes(func(d *jx.Decoder, key []byte) error {
			switch string(key) {
			case "a":
				match := Object1AnythingNestedOneOfObjectRefReqConfig
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "b":
				match := Object1AnythingNestedOneOfObjectRefReqConfig
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "c":
				match := Object2AnythingNestedOneOfObjectRefReqConfig
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "d":
				match := Object2AnythingNestedOneOfObjectRefReqConfig
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			}
			return d.Skip()
		})
	}); err != nil {
		return errors.Wrap(err, "capture")
	}
	if !found {
		return errors.New("unable to detect sum type variant")
	}
	switch s.Type {
	case Object1AnythingNestedOneOfObjectRefReqConfig:
		if err := s.Object1.Decode(d); err != nil {
			return err
		}
	case Object2AnythingNestedOneOfObjectRefReqConfig:
		if err := s.Object2.Decode(d); err != nil {
			return err
		}
	default:
		return errors.Errorf("inferred invalid type: %s", s.Type)
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s AnythingNestedOneOfObjectRefReqConfig) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AnythingNestedOneOfObjectRefReqConfig) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AnythingOneOfObjectRefReq as json.
func (s AnythingOneOfObjectRefReq) Encode(e *jx.Encoder) {
	switch s.Type {
	case Object1AnythingOneOfObjectRefReq:
		s.Object1.Encode(e)
	case Object2AnythingOneOfObjectRefReq:
		s.Object2.Encode(e)
	}
}

func (s AnythingOneOfObjectRefReq) encodeFields(e *jx.Encoder) {
	switch s.Type {
	case Object1AnythingOneOfObjectRefReq:
		s.Object1.encodeFields(e)
	case Object2AnythingOneOfObjectRefReq:
		s.Object2.encodeFields(e)
	}
}

// Decode decodes AnythingOneOfObjectRefReq from json.
func (s *AnythingOneOfObjectRefReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AnythingOneOfObjectRefReq to nil")
	}
	// Sum type fields.
	if typ := d.Next(); typ != jx.Object {
		return errors.Errorf("unexpected json type %q", typ)
	}

	var found bool
	if err := d.Capture(func(d *jx.Decoder) error {
		return d.ObjBytes(func(d *jx.Decoder, key []byte) error {
			switch string(key) {
			case "a":
				match := Object1AnythingOneOfObjectRefReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "b":
				match := Object1AnythingOneOfObjectRefReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "c":
				match := Object2AnythingOneOfObjectRefReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "d":
				match := Object2AnythingOneOfObjectRefReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			}
			return d.Skip()
		})
	}); err != nil {
		return errors.Wrap(err, "capture")
	}
	if !found {
		return errors.New("unable to detect sum type variant")
	}
	switch s.Type {
	case Object1AnythingOneOfObjectRefReq:
		if err := s.Object1.Decode(d); err != nil {
			return err
		}
	case Object2AnythingOneOfObjectRefReq:
		if err := s.Object2.Decode(d); err != nil {
			return err
		}
	default:
		return errors.Errorf("inferred invalid type: %s", s.Type)
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s AnythingOneOfObjectRefReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AnythingOneOfObjectRefReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AnythingOneOfObjectReq as json.
func (s AnythingOneOfObjectReq) Encode(e *jx.Encoder) {
	switch s.Type {
	case AnythingOneOfObjectReq0AnythingOneOfObjectReq:
		s.AnythingOneOfObjectReq0.Encode(e)
	case AnythingOneOfObjectReq1AnythingOneOfObjectReq:
		s.AnythingOneOfObjectReq1.Encode(e)
	}
}

func (s AnythingOneOfObjectReq) encodeFields(e *jx.Encoder) {
	switch s.Type {
	case AnythingOneOfObjectReq0AnythingOneOfObjectReq:
		s.AnythingOneOfObjectReq0.encodeFields(e)
	case AnythingOneOfObjectReq1AnythingOneOfObjectReq:
		s.AnythingOneOfObjectReq1.encodeFields(e)
	}
}

// Decode decodes AnythingOneOfObjectReq from json.
func (s *AnythingOneOfObjectReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AnythingOneOfObjectReq to nil")
	}
	// Sum type fields.
	if typ := d.Next(); typ != jx.Object {
		return errors.Errorf("unexpected json type %q", typ)
	}

	var found bool
	if err := d.Capture(func(d *jx.Decoder) error {
		return d.ObjBytes(func(d *jx.Decoder, key []byte) error {
			switch string(key) {
			case "a":
				match := AnythingOneOfObjectReq0AnythingOneOfObjectReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "b":
				match := AnythingOneOfObjectReq0AnythingOneOfObjectReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "c":
				match := AnythingOneOfObjectReq1AnythingOneOfObjectReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "d":
				match := AnythingOneOfObjectReq1AnythingOneOfObjectReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			}
			return d.Skip()
		})
	}); err != nil {
		return errors.Wrap(err, "capture")
	}
	if !found {
		return errors.New("unable to detect sum type variant")
	}
	switch s.Type {
	case AnythingOneOfObjectReq0AnythingOneOfObjectReq:
		if err := s.AnythingOneOfObjectReq0.Decode(d); err != nil {
			return err
		}
	case AnythingOneOfObjectReq1AnythingOneOfObjectReq:
		if err := s.AnythingOneOfObjectReq1.Decode(d); err != nil {
			return err
		}
	default:
		return errors.Errorf("inferred invalid type: %s", s.Type)
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s AnythingOneOfObjectReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AnythingOneOfObjectReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AnythingOneOfObjectReq0) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AnythingOneOfObjectReq0) encodeFields(e *jx.Encoder) {
	{
		if s.A.Set {
			e.FieldStart("a")
			s.A.Encode(e)
		}
	}
	{
		if s.B.Set {
			e.FieldStart("b")
			s.B.Encode(e)
		}
	}
}

var jsonFieldsNameOfAnythingOneOfObjectReq0 = [2]string{
	0: "a",
	1: "b",
}

// Decode decodes AnythingOneOfObjectReq0 from json.
func (s *AnythingOneOfObjectReq0) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AnythingOneOfObjectReq0 to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "a":
			if err := func() error {
				s.A.Reset()
				if err := s.A.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"a\"")
			}
		case "b":
			if err := func() error {
				s.B.Reset()
				if err := s.B.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"b\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AnythingOneOfObjectReq0")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AnythingOneOfObjectReq0) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AnythingOneOfObjectReq0) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AnythingOneOfObjectReq1) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AnythingOneOfObjectReq1) encodeFields(e *jx.Encoder) {
	{
		if s.C.Set {
			e.FieldStart("c")
			s.C.Encode(e)
		}
	}
	{
		if s.D.Set {
			e.FieldStart("d")
			s.D.Encode(e)
		}
	}
}

var jsonFieldsNameOfAnythingOneOfObjectReq1 = [2]string{
	0: "c",
	1: "d",
}

// Decode decodes AnythingOneOfObjectReq1 from json.
func (s *AnythingOneOfObjectReq1) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AnythingOneOfObjectReq1 to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "c":
			if err := func() error {
				s.C.Reset()
				if err := s.C.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"c\"")
			}
		case "d":
			if err := func() error {
				s.D.Reset()
				if err := s.D.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"d\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AnythingOneOfObjectReq1")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AnythingOneOfObjectReq1) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AnythingOneOfObjectReq1) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AnythingOneOfPrimitiveReq as json.
func (s AnythingOneOfPrimitiveReq) Encode(e *jx.Encoder) {
	switch s.Type {
	case StringAnythingOneOfPrimitiveReq:
		e.Str(s.String)
	case IntAnythingOneOfPrimitiveReq:
		e.Int(s.Int)
	}
}

// Decode decodes AnythingOneOfPrimitiveReq from json.
func (s *AnythingOneOfPrimitiveReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AnythingOneOfPrimitiveReq to nil")
	}
	// Sum type type_discriminator.
	switch t := d.Next(); t {
	case jx.Number:
		v, err := d.Int()
		s.Int = int(v)
		if err != nil {
			return err
		}
		s.Type = IntAnythingOneOfPrimitiveReq
	case jx.String:
		v, err := d.Str()
		s.String = string(v)
		if err != nil {
			return err
		}
		s.Type = StringAnythingOneOfPrimitiveReq
	default:
		return errors.Errorf("unexpected json type %q", t)
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s AnythingOneOfPrimitiveReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AnythingOneOfPrimitiveReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *Cat) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *Cat) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("pet_type")
		e.Str(s.PetType)
	}
	{
		if s.Hunts.Set {
			e.FieldStart("hunts")
			s.Hunts.Encode(e)
		}
	}
	{
		if s.Age.Set {
			e.FieldStart("age")
			s.Age.Encode(e)
		}
	}
}

var jsonFieldsNameOfCat = [3]string{
	0: "pet_type",
	1: "hunts",
	2: "age",
}

// Decode decodes Cat from json.
func (s *Cat) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Cat to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "pet_type":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.PetType = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pet_type\"")
			}
		case "hunts":
			if err := func() error {
				s.Hunts.Reset()
				if err := s.Hunts.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"hunts\"")
			}
		case "age":
			if err := func() error {
				s.Age.Reset()
				if err := s.Age.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"age\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode Cat")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000001,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfCat) {
					name = jsonFieldsNameOfCat[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *Cat) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Cat) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *Dog) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *Dog) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("pet_type")
		e.Str(s.PetType)
	}
	{
		if s.Bark.Set {
			e.FieldStart("bark")
			s.Bark.Encode(e)
		}
	}
	{
		if s.Breed.Set {
			e.FieldStart("breed")
			s.Breed.Encode(e)
		}
	}
}

var jsonFieldsNameOfDog = [3]string{
	0: "pet_type",
	1: "bark",
	2: "breed",
}

// Decode decodes Dog from json.
func (s *Dog) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Dog to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "pet_type":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.PetType = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pet_type\"")
			}
		case "bark":
			if err := func() error {
				s.Bark.Reset()
				if err := s.Bark.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bark\"")
			}
		case "breed":
			if err := func() error {
				s.Breed.Reset()
				if err := s.Breed.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"breed\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode Dog")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000001,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfDog) {
					name = jsonFieldsNameOfDog[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *Dog) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Dog) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes DogBreed as json.
func (s DogBreed) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes DogBreed from json.
func (s *DogBreed) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode DogBreed to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch DogBreed(v) {
	case DogBreedDingo:
		*s = DogBreedDingo
	case DogBreedHusky:
		*s = DogBreedHusky
	case DogBreedRetriever:
		*s = DogBreedRetriever
	case DogBreedShepherd:
		*s = DogBreedShepherd
	default:
		*s = DogBreed(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s DogBreed) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *DogBreed) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetPetsReq as json.
func (s GetPetsReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

func (s GetPetsReq) encodeFields(e *jx.Encoder) {
	switch s.Type {
	case CatGetPetsReq:
		e.FieldStart("pet_type")
		e.Str("Cat")
		s.Cat.encodeFields(e)
	case DogGetPetsReq:
		e.FieldStart("pet_type")
		e.Str("Dog")
		s.Dog.encodeFields(e)
	}
}

// Decode decodes GetPetsReq from json.
func (s *GetPetsReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetPetsReq to nil")
	}
	// Sum type discriminator.
	if typ := d.Next(); typ != jx.Object {
		return errors.Errorf("unexpected json type %q", typ)
	}

	var found bool
	if err := d.Capture(func(d *jx.Decoder) error {
		return d.ObjBytes(func(d *jx.Decoder, key []byte) error {
			if found {
				return d.Skip()
			}
			switch string(key) {
			case "pet_type":
				typ, err := d.Str()
				if err != nil {
					return err
				}
				switch typ {
				case "Cat":
					s.Type = CatGetPetsReq
					found = true
				case "Dog":
					s.Type = DogGetPetsReq
					found = true
				default:
					return errors.Errorf("unknown type %s", typ)
				}
				return nil
			}
			return d.Skip()
		})
	}); err != nil {
		return errors.Wrap(err, "capture")
	}
	if !found {
		return errors.New("unable to detect sum type variant")
	}
	switch s.Type {
	case CatGetPetsReq:
		if err := s.Cat.Decode(d); err != nil {
			return err
		}
	case DogGetPetsReq:
		if err := s.Dog.Decode(d); err != nil {
			return err
		}
	default:
		return errors.Errorf("inferred invalid type: %s", s.Type)
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s GetPetsReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetPetsReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *Object1) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *Object1) encodeFields(e *jx.Encoder) {
	{
		if s.A.Set {
			e.FieldStart("a")
			s.A.Encode(e)
		}
	}
	{
		if s.B.Set {
			e.FieldStart("b")
			s.B.Encode(e)
		}
	}
}

var jsonFieldsNameOfObject1 = [2]string{
	0: "a",
	1: "b",
}

// Decode decodes Object1 from json.
func (s *Object1) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Object1 to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "a":
			if err := func() error {
				s.A.Reset()
				if err := s.A.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"a\"")
			}
		case "b":
			if err := func() error {
				s.B.Reset()
				if err := s.B.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"b\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode Object1")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *Object1) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Object1) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *Object2) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *Object2) encodeFields(e *jx.Encoder) {
	{
		if s.C.Set {
			e.FieldStart("c")
			s.C.Encode(e)
		}
	}
	{
		if s.D.Set {
			e.FieldStart("d")
			s.D.Encode(e)
		}
	}
}

var jsonFieldsNameOfObject2 = [2]string{
	0: "c",
	1: "d",
}

// Decode decodes Object2 from json.
func (s *Object2) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Object2 to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "c":
			if err := func() error {
				s.C.Reset()
				if err := s.C.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"c\"")
			}
		case "d":
			if err := func() error {
				s.D.Reset()
				if err := s.D.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"d\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode Object2")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *Object2) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Object2) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AnythingAllOfObjectReq as json.
func (o OptAnythingAllOfObjectReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes AnythingAllOfObjectReq from json.
func (o *OptAnythingAllOfObjectReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptAnythingAllOfObjectReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptAnythingAllOfObjectReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptAnythingAllOfObjectReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AnythingAnyOfPrimitiveReq as json.
func (o OptAnythingAnyOfPrimitiveReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes AnythingAnyOfPrimitiveReq from json.
func (o *OptAnythingAnyOfPrimitiveReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptAnythingAnyOfPrimitiveReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptAnythingAnyOfPrimitiveReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptAnythingAnyOfPrimitiveReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AnythingNestedOneOfObjectRefReq as json.
func (o OptAnythingNestedOneOfObjectRefReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes AnythingNestedOneOfObjectRefReq from json.
func (o *OptAnythingNestedOneOfObjectRefReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptAnythingNestedOneOfObjectRefReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptAnythingNestedOneOfObjectRefReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptAnythingNestedOneOfObjectRefReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AnythingNestedOneOfObjectRefReqConfig as json.
func (o OptAnythingNestedOneOfObjectRefReqConfig) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes AnythingNestedOneOfObjectRefReqConfig from json.
func (o *OptAnythingNestedOneOfObjectRefReqConfig) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptAnythingNestedOneOfObjectRefReqConfig to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptAnythingNestedOneOfObjectRefReqConfig) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptAnythingNestedOneOfObjectRefReqConfig) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AnythingOneOfObjectRefReq as json.
func (o OptAnythingOneOfObjectRefReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes AnythingOneOfObjectRefReq from json.
func (o *OptAnythingOneOfObjectRefReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptAnythingOneOfObjectRefReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptAnythingOneOfObjectRefReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptAnythingOneOfObjectRefReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AnythingOneOfObjectReq as json.
func (o OptAnythingOneOfObjectReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes AnythingOneOfObjectReq from json.
func (o *OptAnythingOneOfObjectReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptAnythingOneOfObjectReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptAnythingOneOfObjectReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptAnythingOneOfObjectReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AnythingOneOfPrimitiveReq as json.
func (o OptAnythingOneOfPrimitiveReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes AnythingOneOfPrimitiveReq from json.
func (o *OptAnythingOneOfPrimitiveReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptAnythingOneOfPrimitiveReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptAnythingOneOfPrimitiveReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptAnythingOneOfPrimitiveReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes bool as json.
func (o OptBool) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Bool(bool(o.Value))
}

// Decode decodes bool from json.
func (o *OptBool) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptBool to nil")
	}
	o.Set = true
	v, err := d.Bool()
	if err != nil {
		return err
	}
	o.Value = bool(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptBool) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptBool) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes DogBreed as json.
func (o OptDogBreed) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes DogBreed from json.
func (o *OptDogBreed) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptDogBreed to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptDogBreed) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptDogBreed) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetPetsReq as json.
func (o OptGetPetsReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetPetsReq from json.
func (o *OptGetPetsReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGetPetsReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGetPetsReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGetPetsReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes int as json.
func (o OptInt) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Int(int(o.Value))
}

// Decode decodes int from json.
func (o *OptInt) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptInt to nil")
	}
	o.Set = true
	v, err := d.Int()
	if err != nil {
		return err
	}
	o.Value = int(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptInt) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptInt) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes string as json.
func (o OptString) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes string from json.
func (o *OptString) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptString to nil")
	}
	o.Set = true
	v, err := d.Str()
	if err != nil {
		return err
	}
	o.Value = string(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptString) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptString) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}
